// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\zombies\_zm_utility;

main()
{
    registerclientfield( "world", "sky_battle_ambient_fx", 14000, 1, "int", ::dogfights_callback );
    setup_dogfights();
}

setup_dogfights()
{
    add_dogfight_pair( "fx_tp12_bck_smoke", "fx_bp12_rt_fire", "fx_bp12_lft_fire" );
    add_dogfight_pair( "fx_bp13_bck_smoke", "fx_tp13_rt_fire", "fx_tp13_lft_fire" );
    add_dogfight_pair( "fx_tp16_bck_smoke", "fx_bp16_rt_fire", "fx_bp16_lft_fire" );
    add_dogfight_pair( "fx_bp19_bck_smoke", "fx_tp19_rt_fire", "fx_tp19_lft_fire" );
}

dogfights_callback( localclientnumber, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval )
        level thread dogfights_start( localclientnumber );
}

dogfights_start( localclientnumber )
{
    disable_all_dogfight_planes( localclientnumber );

    for ( i = 0; i < 3; i++ )
    {
        if ( i % 2 == 0 )
            str_identifier = "dogfight_planes_1";
        else
            str_identifier = "dogfight_planes_2";

        level thread _dogfights_start( str_identifier, localclientnumber );
    }
}

disable_all_dogfight_planes( localclientnumber )
{
    level notify( "dogfight_fx_disable" );

    if ( isdefined( level.dogfight_planes ) )
    {
        foreach ( struct in level.dogfight_planes )
        {
            if ( isdefined( struct.plane_front_fx_smoke ) && isdefined( struct.plane_front_fx_smoke[localclientnumber] ) )
                deletefx( localclientnumber, struct.plane_front_fx_smoke[localclientnumber] );

            if ( isdefined( struct.plane_rear_fx_tracer_left ) && isdefined( struct.plane_rear_fx_tracer_left[localclientnumber] ) )
                deletefx( localclientnumber, struct.plane_rear_fx_tracer_left[localclientnumber] );

            if ( isdefined( struct.plane_rear_fx_tracer_right ) && isdefined( struct.plane_rear_fx_tracer_right[localclientnumber] ) )
                deletefx( localclientnumber, struct.plane_rear_fx_tracer_right[localclientnumber] );

            if ( !isdefined( struct.in_use ) )
                struct.in_use = [];

            if ( isdefined( struct.in_use[localclientnumber] ) )
                struct.in_use[localclientnumber] = 0;
        }
    }
}

_dogfights_start( str_name, localclientnumber )
{
    level endon( "dogfight_fx_disable" );

    while ( true )
    {
        play_fx_on_random_unused_dogfight_pair( str_name, localclientnumber );
        wait 3;
    }
}

add_dogfight_pair( str_plane_front_tag_smoke, str_plane_rear_tag_fire_right, str_plane_rear_tag_fire_left )
{
    if ( !isdefined( level.dogfight_planes ) )
        level.dogfight_planes = [];

    s_temp = spawnstruct();
    s_temp.plane_front_tag_smoke = str_plane_front_tag_smoke;
    s_temp.plane_rear_tag_fire_right = str_plane_rear_tag_fire_right;
    s_temp.plane_rear_tag_fire_left = str_plane_rear_tag_fire_left;
    s_temp.in_use = [];
    level.dogfight_planes[level.dogfight_planes.size] = s_temp;
}

play_fx_on_random_unused_dogfight_pair( str_model_name, localclientnumber )
{
    m_planes = get_dogfight_plane_model( localclientnumber, str_model_name );
    s_temp = get_random_unused_plane_pair( localclientnumber );
    s_temp.in_use[localclientnumber] = 1;
    n_random_time = randomintrange( 10, 30 );
    n_loops = int( n_random_time / 2.5 );
    m_planes plane_front_smoke_fx_start( localclientnumber, s_temp );

    for ( i = 0; i < n_loops; i++ )
    {
        m_planes plane_rear_tracer_fx_start( localclientnumber, s_temp );
        wait 2.5;
    }

    m_planes plane_front_smoke_fx_end( localclientnumber, s_temp );
    m_planes plane_rear_tracer_fx_end( localclientnumber, s_temp );
    s_temp.in_use[localclientnumber] = 0;
}

plane_front_smoke_fx_start( localclientnumber, s_temp )
{
    self plane_front_smoke_fx_end( localclientnumber, s_temp );
    s_temp.plane_front_fx_smoke[localclientnumber] = playfxontag( localclientnumber, level._effect["sky_plane_trail"], self, s_temp.plane_front_tag_smoke );
}

plane_front_smoke_fx_end( localclientnumber, s_temp )
{
    if ( !isdefined( s_temp.plane_front_fx_smoke ) )
        s_temp.plane_front_fx_smoke = [];

    if ( isdefined( s_temp.plane_front_fx_smoke[localclientnumber] ) )
        deletefx( localclientnumber, s_temp.plane_front_fx_smoke[localclientnumber], 0 );
}

plane_rear_tracer_fx_start( localclientnumber, s_temp )
{
    self plane_rear_tracer_fx_end( localclientnumber, s_temp );
    s_temp.plane_rear_fx_tracer_right[localclientnumber] = playfxontag( localclientnumber, level._effect["sky_plane_tracers"], self, s_temp.plane_rear_tag_fire_right );
    wait( randomfloatrange( 0.2, 0.5 ) );
    s_temp.plane_rear_fx_tracer_left[localclientnumber] = playfxontag( localclientnumber, level._effect["sky_plane_tracers"], self, s_temp.plane_rear_tag_fire_left );
}

plane_rear_tracer_fx_end( localclientnumber, s_temp )
{
    if ( !isdefined( s_temp.plane_rear_fx_tracer_right ) )
        s_temp.plane_rear_fx_tracer_right = [];

    if ( isdefined( s_temp.plane_rear_fx_tracer_right[localclientnumber] ) )
        deletefx( localclientnumber, s_temp.plane_rear_fx_tracer_right[localclientnumber], 0 );

    if ( !isdefined( s_temp.plane_rear_fx_tracer_left ) )
        s_temp.plane_rear_fx_tracer_left = [];

    if ( isdefined( s_temp.plane_rear_fx_tracer_left[localclientnumber] ) )
        deletefx( localclientnumber, s_temp.plane_rear_fx_tracer_left[localclientnumber], 0 );
}

get_dogfight_plane_model( localclientnumber, str_identifier )
{
    if ( !isdefined( level.dogfight_plane_models ) )
        level.dogfight_plane_models = [];

    if ( !isdefined( level.dogfight_plane_models[str_identifier] ) )
        level.dogfight_plane_models[str_identifier] = [];

    if ( !isdefined( level.dogfight_plane_models[str_identifier][localclientnumber] ) )
        level.dogfight_plane_models[str_identifier][localclientnumber] = get_fxanim_from_script_noteworthy( localclientnumber, str_identifier );

    assert( isdefined( level.dogfight_plane_models[str_identifier][localclientnumber] ), "tomb ambient scripts can't find dogfight plane model with script_noteworthy " + str_identifier );
    level.dogfight_plane_models[str_identifier][localclientnumber] waittill_dobj( localclientnumber );
    return level.dogfight_plane_models[str_identifier][localclientnumber];
}

get_fxanim_from_script_noteworthy( localclientnumber, str_identifier )
{
    a_fxanims = getentarray( localclientnumber, "fxanim", "targetname" );

    foreach ( ent in a_fxanims )
    {
        if ( isdefined( ent.script_noteworthy ) && ent.script_noteworthy == str_identifier )
            return ent;
    }
}

get_random_unused_plane_pair( localclientnumber )
{
    a_unused = [];

    foreach ( s_pair in level.dogfight_planes )
    {
        if ( !isdefined( s_pair.in_use[localclientnumber] ) )
            s_pair.in_use[localclientnumber] = 0;

        if ( !s_pair.in_use[localclientnumber] )
            a_unused[a_unused.size] = s_pair;
    }

    assert( a_unused.size > 0, "get_random_unused_plane_pair() couldn't find any unused dogfight pairs for ambient planes!" );
    s_chosen = random( a_unused );
    return s_chosen;
}
