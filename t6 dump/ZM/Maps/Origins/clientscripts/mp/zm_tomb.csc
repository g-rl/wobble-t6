// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\_filter;
#include clientscripts\mp\_audio;
#include clientscripts\mp\zm_tomb_ffotd;
#include clientscripts\mp\zm_tomb_teleporter;
#include clientscripts\mp\zombies\_zm_weap_one_inch_punch;
#include clientscripts\mp\zombies\_zm_perk_electric_cherry;
#include clientscripts\mp\zombies\_zm_perk_divetonuke;
#include clientscripts\mp\zm_tomb_quest_fire;
#include clientscripts\mp\zm_tomb_tank;
#include clientscripts\mp\zm_tomb_giant_robot;
#include clientscripts\mp\zm_tomb_capture_zones;
#include clientscripts\mp\zombies\_zm_ai_mechz;
#include clientscripts\mp\zombies\_zm_perk_random;
#include clientscripts\mp\zombies\_zm_challenges;
#include clientscripts\mp\zm_tomb_dig;
#include clientscripts\mp\zm_tomb_fx;
#include clientscripts\mp\zm_tomb_ee;
#include clientscripts\mp\zm_tomb_amb;
#include clientscripts\mp\zm_tomb_ambient_scripts;
#include clientscripts\mp\zm_tomb_classic;
#include clientscripts\mp\zombies\_zm;
#include clientscripts\mp\_sticky_grenade;
#include clientscripts\mp\zombies\_zm_weap_beacon;
#include clientscripts\mp\zombies\_zm_weap_riotshield_tomb;
#include clientscripts\mp\zombies\_zm_weap_staff_air;
#include clientscripts\mp\zombies\_zm_weap_staff_fire;
#include clientscripts\mp\zombies\_zm_weap_staff_lightning;
#include clientscripts\mp\zombies\_zm_weap_staff_water;
#include clientscripts\mp\zombies\_zm_weap_cymbal_monkey;
#include clientscripts\mp\zombies\_zm_magicbox_tomb;
#include clientscripts\mp\zombies\_zm_powerup_zombie_blood;
#include clientscripts\mp\_visionset_mgr;
#include clientscripts\mp\zombies\_zm_equipment;
#include clientscripts\mp\zombies\_zm_ai_quadrotor;
#include clientscripts\mp\_fx;

main()
{
    level thread clientscripts\mp\zm_tomb_ffotd::main_start();
    level._effect["teleport_1p"] = loadfx( "maps/zombie_tomb/fx_tomb_teleport_1p" );
    registerclientfield( "scriptmover", "element_glow_fx", 14000, 4, "int", ::crystal_fx, 0 );
    registerclientfield( "scriptmover", "bryce_cake", 14000, 2, "int", ::init_central_crypt_disc, 0 );
    registerclientfield( "scriptmover", "switch_spark", 14000, 1, "int", ::switch_spark_fx, 0 );
    registerclientfield( "world", "cooldown_steam", 14000, 2, "int", ::switch_cooldown_fx, 0 );
    registerclientfield( "scriptmover", "teleporter_fx", 14000, 1, "int", clientscripts\mp\zm_tomb_teleporter::teleporter_fx_play, 0 );
    n_bits = getminbitcountfornum( 6 );
    registerclientfield( "toplayer", "player_rumble_and_shake", 14000, n_bits, "int", ::player_rumble_and_shake, 0 );
    registerclientfield( "scriptmover", "stone_frozen", 14000, 1, "int", ::stone_frozen_shader, 0 );
    n_bits = getminbitcountfornum( 5 );
    registerclientfield( "world", "rain_level", 14000, n_bits, "int", ::set_level_rain, 0 );
    registerclientfield( "world", "snow_level", 14000, n_bits, "int", ::set_level_snow, 0 );
    registerclientfield( "toplayer", "player_weather_visionset", 14000, 2, "int", ::set_player_weather_visionset, 0 );
    registerclientfield( "scriptmover", "sky_pillar", 14000, 1, "int", ::sky_pillar_fx, 0 );
    registerclientfield( "scriptmover", "staff_charger", 14000, 3, "int", ::staff_charger_init, 0 );
    registerclientfield( "toplayer", "player_staff_charge", 14000, 2, "int", ::player_staff_charge_level, 0 );
    registerclientfield( "toplayer", "player_tablet_state", 14000, 2, "int", ::player_tablet_state, 0, 1 );
    setupclientfieldcodecallbacks( "toplayer", 1, "player_tablet_state" );
    registerclientfield( "actor", "zombie_soul", 14000, 1, "int", ::zombie_soul_fx, 0 );
    registerclientfield( "zbarrier", "magicbox_runes", 14000, 1, "int", ::magicbox_shader_cb, 0, 0 );
    registerclientfield( "actor", "foot_print_box_fx", 14000, 1, "int", ::foot_print_box_fx, 0 );
    registerclientfield( "scriptmover", "foot_print_box_glow", 14000, 1, "int", ::foot_print_box_glow, 0 );
    registerclientfield( "world", "crypt_open_exploder", 14000, 1, "int", ::crypt_open, 0 );
    registerclientfield( "world", "lantern_fx", 14000, 1, "int", ::toggle_lantern_fx );
    registerclientfield( "allplayers", "oneinchpunch_impact", 14000, 1, "int", clientscripts\mp\zombies\_zm_weap_one_inch_punch::oneinchpunch_impact, 0 );
    registerclientfield( "actor", "oneinchpunch_physics_launchragdoll", 14000, 1, "int", clientscripts\mp\zombies\_zm_weap_one_inch_punch::oneinchpunch_physics_launchragdoll, 0 );
    level.default_start_location = "tomb";
    level.default_game_mode = "zclassic";
    level._no_water_risers = 1;
    level.eyeball_luminance_override = 3;
    level.zombie_eyes_clientfield_cb_additional = ::zm_tomb_zombie_eyes_think;
    level._uses_sticky_grenades = 1;
    level.disable_fx_zmb_wall_buy_semtex = 1;
    level._uses_taser_knuckles = 0;
    level._uses_default_wallbuy_fx = 0;
    level._wallbuy_override_num_bits = 1;
    level.setupcustomcharacterexerts = ::setup_personality_character_exerts;
    level.zombiemode_using_juggernaut_perk = 1;
    level.zombiemode_using_revive_perk = 1;
    level.zombiemode_using_sleightofhand_perk = 1;
    level.zombiemode_using_additionalprimaryweapon_perk = 1;
    level.zombiemode_using_marathon_perk = 1;
    level.zombiemode_using_deadshot_perk = 1;
    level.zombiemode_using_doubletap_perk = 1;
    level.zombiemode_using_random_perk = 1;
    level._no_equipment_activated_clientfield = 1;
    level._no_navcards = 1;
    level.weather_rain = 0;
    level.weather_snow = 0;
    level.weather_fog = 0;
    clientscripts\mp\zombies\_zm_perk_electric_cherry::enable_electric_cherry_perk_for_level();
    level.zombiemode_using_additionalprimaryweapon_perk = 1;
    level.zombiemode_using_divetonuke_perk = 1;
    clientscripts\mp\zombies\_zm_perk_divetonuke::enable_divetonuke_perk_for_level();
    clientscripts\mp\zm_tomb_quest_fire::main();
    clientscripts\mp\zm_tomb_tank::init();
    clientscripts\mp\zm_tomb_giant_robot::init();
    clientscripts\mp\zm_tomb_quest_fire::init_animtree();
    clientscripts\mp\zm_tomb_capture_zones::init_cz_animtree();
    clientscripts\mp\zm_tomb_teleporter::init_animtree();
    clientscripts\mp\zm_tomb_giant_robot::init_animtree();
    clientscripts\mp\zombies\_zm_ai_mechz::precache();
    clientscripts\mp\zombies\_zm_perk_random::init();
    start_zombie_stuff();
    init_gamemodes();
    clientscripts\mp\zombies\_zm_ai_mechz::init();
    clientscripts\mp\zombies\_zm_challenges::init();
    clientscripts\mp\zombies\_zm_perk_random::init_animtree();
    clientscripts\mp\zm_tomb_dig::init();
    clientscripts\mp\zm_tomb_fx::main();
    clientscripts\mp\zm_tomb_ee::init();
    thread clientscripts\mp\zm_tomb_amb::main();
    level thread clientscripts\mp\zm_tomb_ambient_scripts::main();
    level._entityspawned_override = ::entityspawned_tomb;
    zombe_gametype_premain();
    clientscripts\mp\zm_tomb_capture_zones::init_structs();
    level thread clientscripts\mp\zm_tomb_ffotd::main_end();
    level.n_level_sunlight = getdvarfloat( #"r_lightTweakSunLight" );
    waitforclient( 0 );
    level thread clientscripts\mp\zm_tomb_fx::setup_prop_anims();
    level thread init_fog_vol_to_visionset();
    level thread clientscripts\mp\zm_tomb_capture_zones::init_custom_pap();
    level.sndnomeleeonclient = 1;
    setsaveddvar( "tu14_bg_chargeShotExponentialAmmoPerChargeLevel", 1 );
    setsaveddvar( "sm_sunsamplesizenear", 0.3 );
}

init_gamemodes()
{
    add_map_gamemode( "zclassic", undefined, undefined );
    add_map_location_gamemode( "zclassic", "tomb", clientscripts\mp\zm_tomb_classic::precache, clientscripts\mp\zm_tomb_classic::premain, clientscripts\mp\zm_tomb_classic::main );
}

start_zombie_stuff()
{
    level.raygun2_included = 1;
    include_weapons();
    include_powerups();
    include_equipment_for_level();
    clientscripts\mp\zombies\_zm::init();
    level thread clientscripts\mp\_sticky_grenade::main();
    clientscripts\mp\zombies\_zm_weap_beacon::init();
    clientscripts\mp\zombies\_zm_weap_riotshield_tomb::init();
    clientscripts\mp\zombies\_zm_weap_staff_air::init();
    clientscripts\mp\zombies\_zm_weap_staff_fire::init();
    clientscripts\mp\zombies\_zm_weap_staff_lightning::init();
    clientscripts\mp\zombies\_zm_weap_staff_water::init();
    clientscripts\mp\zombies\_zm_weap_cymbal_monkey::init();
    clientscripts\mp\zombies\_zm_magicbox_tomb::init();
    clientscripts\mp\zombies\_zm_powerup_zombie_blood::init();
    clientscripts\mp\zm_tomb_teleporter::main();
    clientscripts\mp\_visionset_mgr::vsmgr_register_overlay_info_style_burn( "zm_transit_burn", 14000, 15, 2 );
}

include_equipment_for_level()
{
    clientscripts\mp\zombies\_zm_equipment::include_equipment( "equip_dieseldrone_zm" );
    clientscripts\mp\zombies\_zm_equipment::include_equipment( "tomb_shield_zm" );
}

setup_personality_character_exerts()
{
    level.exert_sounds[1]["playerbreathinsound"][0] = "vox_plr_0_exert_inhale_0";
    level.exert_sounds[1]["playerbreathinsound"][1] = "vox_plr_0_exert_inhale_1";
    level.exert_sounds[1]["playerbreathinsound"][2] = "vox_plr_0_exert_inhale_2";
    level.exert_sounds[2]["playerbreathinsound"][0] = "vox_plr_1_exert_inhale_0";
    level.exert_sounds[2]["playerbreathinsound"][1] = "vox_plr_1_exert_inhale_1";
    level.exert_sounds[2]["playerbreathinsound"][2] = "vox_plr_1_exert_inhale_2";
    level.exert_sounds[3]["playerbreathinsound"][0] = "vox_plr_2_exert_inhale_0";
    level.exert_sounds[3]["playerbreathinsound"][1] = "vox_plr_2_exert_inhale_1";
    level.exert_sounds[3]["playerbreathinsound"][2] = "vox_plr_2_exert_inhale_2";
    level.exert_sounds[4]["playerbreathinsound"][0] = "vox_plr_3_exert_inhale_0";
    level.exert_sounds[4]["playerbreathinsound"][1] = "vox_plr_3_exert_inhale_1";
    level.exert_sounds[4]["playerbreathinsound"][2] = "vox_plr_3_exert_inhale_2";
    level.exert_sounds[1]["playerbreathoutsound"][0] = "vox_plr_0_exert_exhale_0";
    level.exert_sounds[1]["playerbreathoutsound"][1] = "vox_plr_0_exert_exhale_1";
    level.exert_sounds[1]["playerbreathoutsound"][2] = "vox_plr_0_exert_exhale_2";
    level.exert_sounds[2]["playerbreathoutsound"][0] = "vox_plr_1_exert_exhale_0";
    level.exert_sounds[2]["playerbreathoutsound"][1] = "vox_plr_1_exert_exhale_1";
    level.exert_sounds[2]["playerbreathoutsound"][2] = "vox_plr_1_exert_exhale_2";
    level.exert_sounds[3]["playerbreathoutsound"][0] = "vox_plr_2_exert_exhale_0";
    level.exert_sounds[3]["playerbreathoutsound"][1] = "vox_plr_2_exert_exhale_1";
    level.exert_sounds[3]["playerbreathoutsound"][2] = "vox_plr_2_exert_exhale_2";
    level.exert_sounds[4]["playerbreathoutsound"][0] = "vox_plr_3_exert_exhale_0";
    level.exert_sounds[4]["playerbreathoutsound"][1] = "vox_plr_3_exert_exhale_1";
    level.exert_sounds[4]["playerbreathoutsound"][2] = "vox_plr_3_exert_exhale_2";
    level.exert_sounds[1]["playerbreathgaspsound"][0] = "vox_plr_0_exert_exhale_0";
    level.exert_sounds[1]["playerbreathgaspsound"][1] = "vox_plr_0_exert_exhale_1";
    level.exert_sounds[1]["playerbreathgaspsound"][2] = "vox_plr_0_exert_exhale_2";
    level.exert_sounds[2]["playerbreathgaspsound"][0] = "vox_plr_1_exert_exhale_0";
    level.exert_sounds[2]["playerbreathgaspsound"][1] = "vox_plr_1_exert_exhale_1";
    level.exert_sounds[2]["playerbreathgaspsound"][2] = "vox_plr_1_exert_exhale_2";
    level.exert_sounds[3]["playerbreathgaspsound"][0] = "vox_plr_2_exert_exhale_0";
    level.exert_sounds[3]["playerbreathgaspsound"][1] = "vox_plr_2_exert_exhale_1";
    level.exert_sounds[3]["playerbreathgaspsound"][2] = "vox_plr_2_exert_exhale_2";
    level.exert_sounds[4]["playerbreathgaspsound"][0] = "vox_plr_3_exert_exhale_0";
    level.exert_sounds[4]["playerbreathgaspsound"][1] = "vox_plr_3_exert_exhale_1";
    level.exert_sounds[4]["playerbreathgaspsound"][2] = "vox_plr_3_exert_exhale_2";
    level.exert_sounds[1]["falldamage"][0] = "vox_plr_0_exert_pain_low_0";
    level.exert_sounds[1]["falldamage"][1] = "vox_plr_0_exert_pain_low_1";
    level.exert_sounds[1]["falldamage"][2] = "vox_plr_0_exert_pain_low_2";
    level.exert_sounds[1]["falldamage"][3] = "vox_plr_0_exert_pain_low_3";
    level.exert_sounds[1]["falldamage"][4] = "vox_plr_0_exert_pain_low_4";
    level.exert_sounds[1]["falldamage"][5] = "vox_plr_0_exert_pain_low_5";
    level.exert_sounds[1]["falldamage"][6] = "vox_plr_0_exert_pain_low_6";
    level.exert_sounds[1]["falldamage"][7] = "vox_plr_0_exert_pain_low_7";
    level.exert_sounds[2]["falldamage"][0] = "vox_plr_1_exert_pain_low_0";
    level.exert_sounds[2]["falldamage"][1] = "vox_plr_1_exert_pain_low_1";
    level.exert_sounds[2]["falldamage"][2] = "vox_plr_1_exert_pain_low_2";
    level.exert_sounds[2]["falldamage"][3] = "vox_plr_1_exert_pain_low_3";
    level.exert_sounds[2]["falldamage"][4] = "vox_plr_1_exert_pain_low_4";
    level.exert_sounds[2]["falldamage"][5] = "vox_plr_1_exert_pain_low_5";
    level.exert_sounds[2]["falldamage"][6] = "vox_plr_1_exert_pain_low_6";
    level.exert_sounds[2]["falldamage"][7] = "vox_plr_1_exert_pain_low_7";
    level.exert_sounds[3]["falldamage"][0] = "vox_plr_2_exert_pain_low_0";
    level.exert_sounds[3]["falldamage"][1] = "vox_plr_2_exert_pain_low_1";
    level.exert_sounds[3]["falldamage"][2] = "vox_plr_2_exert_pain_low_2";
    level.exert_sounds[3]["falldamage"][3] = "vox_plr_2_exert_pain_low_3";
    level.exert_sounds[3]["falldamage"][4] = "vox_plr_2_exert_pain_low_4";
    level.exert_sounds[3]["falldamage"][5] = "vox_plr_2_exert_pain_low_5";
    level.exert_sounds[3]["falldamage"][6] = "vox_plr_2_exert_pain_low_6";
    level.exert_sounds[3]["falldamage"][7] = "vox_plr_2_exert_pain_low_7";
    level.exert_sounds[4]["falldamage"][0] = "vox_plr_3_exert_pain_low_0";
    level.exert_sounds[4]["falldamage"][1] = "vox_plr_3_exert_pain_low_1";
    level.exert_sounds[4]["falldamage"][2] = "vox_plr_3_exert_pain_low_2";
    level.exert_sounds[4]["falldamage"][3] = "vox_plr_3_exert_pain_low_3";
    level.exert_sounds[4]["falldamage"][4] = "vox_plr_3_exert_pain_low_4";
    level.exert_sounds[4]["falldamage"][5] = "vox_plr_3_exert_pain_low_5";
    level.exert_sounds[4]["falldamage"][6] = "vox_plr_3_exert_pain_low_6";
    level.exert_sounds[4]["falldamage"][7] = "vox_plr_3_exert_pain_low_7";
    level.exert_sounds[1]["mantlesoundplayer"][0] = "vox_plr_0_exert_grunt_0";
    level.exert_sounds[1]["mantlesoundplayer"][1] = "vox_plr_0_exert_grunt_1";
    level.exert_sounds[1]["mantlesoundplayer"][2] = "vox_plr_0_exert_grunt_2";
    level.exert_sounds[1]["mantlesoundplayer"][3] = "vox_plr_0_exert_grunt_3";
    level.exert_sounds[1]["mantlesoundplayer"][4] = "vox_plr_0_exert_grunt_4";
    level.exert_sounds[1]["mantlesoundplayer"][5] = "vox_plr_0_exert_grunt_5";
    level.exert_sounds[1]["mantlesoundplayer"][6] = "vox_plr_0_exert_grunt_6";
    level.exert_sounds[2]["mantlesoundplayer"][0] = "vox_plr_1_exert_grunt_0";
    level.exert_sounds[2]["mantlesoundplayer"][1] = "vox_plr_1_exert_grunt_1";
    level.exert_sounds[2]["mantlesoundplayer"][2] = "vox_plr_1_exert_grunt_2";
    level.exert_sounds[2]["mantlesoundplayer"][3] = "vox_plr_1_exert_grunt_3";
    level.exert_sounds[2]["mantlesoundplayer"][4] = "vox_plr_1_exert_grunt_4";
    level.exert_sounds[2]["mantlesoundplayer"][5] = "vox_plr_1_exert_grunt_5";
    level.exert_sounds[3]["mantlesoundplayer"][0] = "vox_plr_2_exert_grunt_0";
    level.exert_sounds[3]["mantlesoundplayer"][1] = "vox_plr_2_exert_grunt_1";
    level.exert_sounds[3]["mantlesoundplayer"][2] = "vox_plr_2_exert_grunt_2";
    level.exert_sounds[3]["mantlesoundplayer"][3] = "vox_plr_2_exert_grunt_3";
    level.exert_sounds[3]["mantlesoundplayer"][4] = "vox_plr_2_exert_grunt_4";
    level.exert_sounds[3]["mantlesoundplayer"][5] = "vox_plr_2_exert_grunt_5";
    level.exert_sounds[3]["mantlesoundplayer"][6] = "vox_plr_2_exert_grunt_6";
    level.exert_sounds[4]["mantlesoundplayer"][0] = "vox_plr_3_exert_grunt_0";
    level.exert_sounds[4]["mantlesoundplayer"][1] = "vox_plr_3_exert_grunt_1";
    level.exert_sounds[4]["mantlesoundplayer"][2] = "vox_plr_3_exert_grunt_2";
    level.exert_sounds[4]["mantlesoundplayer"][3] = "vox_plr_3_exert_grunt_4";
    level.exert_sounds[4]["mantlesoundplayer"][4] = "vox_plr_3_exert_grunt_5";
    level.exert_sounds[4]["mantlesoundplayer"][5] = "vox_plr_3_exert_grunt_6";
    level.exert_sounds[1]["meleeswipesoundplayer"][0] = "vox_plr_0_exert_knife_swipe_0";
    level.exert_sounds[1]["meleeswipesoundplayer"][1] = "vox_plr_0_exert_knife_swipe_1";
    level.exert_sounds[1]["meleeswipesoundplayer"][2] = "vox_plr_0_exert_knife_swipe_2";
    level.exert_sounds[1]["meleeswipesoundplayer"][3] = "vox_plr_0_exert_knife_swipe_3";
    level.exert_sounds[1]["meleeswipesoundplayer"][4] = "vox_plr_0_exert_knife_swipe_4";
    level.exert_sounds[1]["meleeswipesoundplayer"][5] = "vox_plr_0_exert_knife_swipe_5";
    level.exert_sounds[2]["meleeswipesoundplayer"][0] = "vox_plr_1_exert_knife_swipe_0";
    level.exert_sounds[2]["meleeswipesoundplayer"][1] = "vox_plr_1_exert_knife_swipe_1";
    level.exert_sounds[2]["meleeswipesoundplayer"][2] = "vox_plr_1_exert_knife_swipe_2";
    level.exert_sounds[2]["meleeswipesoundplayer"][3] = "vox_plr_1_exert_knife_swipe_3";
    level.exert_sounds[2]["meleeswipesoundplayer"][4] = "vox_plr_1_exert_knife_swipe_4";
    level.exert_sounds[2]["meleeswipesoundplayer"][5] = "vox_plr_1_exert_knife_swipe_5";
    level.exert_sounds[3]["meleeswipesoundplayer"][0] = "vox_plr_2_exert_knife_swipe_0";
    level.exert_sounds[3]["meleeswipesoundplayer"][1] = "vox_plr_2_exert_knife_swipe_1";
    level.exert_sounds[3]["meleeswipesoundplayer"][2] = "vox_plr_2_exert_knife_swipe_2";
    level.exert_sounds[3]["meleeswipesoundplayer"][3] = "vox_plr_2_exert_knife_swipe_3";
    level.exert_sounds[3]["meleeswipesoundplayer"][4] = "vox_plr_2_exert_knife_swipe_4";
    level.exert_sounds[3]["meleeswipesoundplayer"][5] = "vox_plr_2_exert_knife_swipe_5";
    level.exert_sounds[4]["meleeswipesoundplayer"][0] = "vox_plr_3_exert_knife_swipe_0";
    level.exert_sounds[4]["meleeswipesoundplayer"][1] = "vox_plr_3_exert_knife_swipe_1";
    level.exert_sounds[4]["meleeswipesoundplayer"][2] = "vox_plr_3_exert_knife_swipe_2";
    level.exert_sounds[4]["meleeswipesoundplayer"][3] = "vox_plr_3_exert_knife_swipe_3";
    level.exert_sounds[4]["meleeswipesoundplayer"][4] = "vox_plr_3_exert_knife_swipe_4";
    level.exert_sounds[4]["meleeswipesoundplayer"][5] = "vox_plr_3_exert_knife_swipe_5";
    level.exert_sounds[1]["dtplandsoundplayer"][0] = "vox_plr_0_exert_pain_medium_0";
    level.exert_sounds[1]["dtplandsoundplayer"][1] = "vox_plr_0_exert_pain_medium_1";
    level.exert_sounds[1]["dtplandsoundplayer"][2] = "vox_plr_0_exert_pain_medium_2";
    level.exert_sounds[1]["dtplandsoundplayer"][3] = "vox_plr_0_exert_pain_medium_3";
    level.exert_sounds[2]["dtplandsoundplayer"][0] = "vox_plr_1_exert_pain_medium_0";
    level.exert_sounds[2]["dtplandsoundplayer"][1] = "vox_plr_1_exert_pain_medium_1";
    level.exert_sounds[2]["dtplandsoundplayer"][2] = "vox_plr_1_exert_pain_medium_2";
    level.exert_sounds[2]["dtplandsoundplayer"][3] = "vox_plr_1_exert_pain_medium_3";
    level.exert_sounds[3]["dtplandsoundplayer"][0] = "vox_plr_2_exert_pain_medium_0";
    level.exert_sounds[3]["dtplandsoundplayer"][1] = "vox_plr_2_exert_pain_medium_1";
    level.exert_sounds[3]["dtplandsoundplayer"][2] = "vox_plr_2_exert_pain_medium_2";
    level.exert_sounds[3]["dtplandsoundplayer"][3] = "vox_plr_2_exert_pain_medium_3";
    level.exert_sounds[4]["dtplandsoundplayer"][0] = "vox_plr_3_exert_pain_medium_0";
    level.exert_sounds[4]["dtplandsoundplayer"][1] = "vox_plr_3_exert_pain_medium_1";
    level.exert_sounds[4]["dtplandsoundplayer"][2] = "vox_plr_3_exert_pain_medium_2";
    level.exert_sounds[4]["dtplandsoundplayer"][3] = "vox_plr_3_exert_pain_medium_3";
}

init_fog_vol_to_visionset()
{
    init_fog_vol_to_visionset_monitor( "zm_tomb", 1 );
    fog_vol_to_visionset_set_suffix( "" );
    fog_vol_to_visionset_set_info( 0, "zm_tomb" );
    level thread fog_vol_to_visionset_monitor();
}

init_clientflag_variables()
{

}

register_clientflag_callbacks()
{

}

include_weapons()
{
    include_weapon( "hamr_zm" );
    include_weapon( "hamr_upgraded_zm", 0 );
    include_weapon( "mg08_zm" );
    include_weapon( "mg08_upgraded_zm", 0 );
    include_weapon( "type95_zm" );
    include_weapon( "type95_upgraded_zm", 0 );
    include_weapon( "galil_zm" );
    include_weapon( "galil_upgraded_zm", 0 );
    include_weapon( "fnfal_zm" );
    include_weapon( "fnfal_upgraded_zm", 0 );
    include_weapon( "m14_zm", 0 );
    include_weapon( "m14_upgraded_zm", 0 );
    include_weapon( "mp44_zm", 0 );
    include_weapon( "mp44_upgraded_zm", 0 );
    include_weapon( "scar_zm" );
    include_weapon( "scar_upgraded_zm", 0 );
    include_weapon( "870mcs_zm", 0 );
    include_weapon( "870mcs_upgraded_zm", 0 );
    include_weapon( "ksg_zm" );
    include_weapon( "ksg_upgraded_zm", 0 );
    include_weapon( "srm1216_zm" );
    include_weapon( "srm1216_upgraded_zm", 0 );
    include_weapon( "ak74u_zm", 0 );
    include_weapon( "ak74u_upgraded_zm", 0 );
    include_weapon( "ak74u_extclip_zm" );
    include_weapon( "ak74u_extclip_upgraded_zm", 0 );
    include_weapon( "pdw57_zm" );
    include_weapon( "pdw57_upgraded_zm", 0 );
    include_weapon( "thompson_zm" );
    include_weapon( "thompson_upgraded_zm", 0 );
    include_weapon( "qcw05_zm" );
    include_weapon( "qcw05_upgraded_zm", 0 );
    include_weapon( "mp40_zm", 0 );
    include_weapon( "mp40_upgraded_zm", 0 );
    include_weapon( "mp40_stalker_zm" );
    include_weapon( "mp40_stalker_upgraded_zm", 0 );
    include_weapon( "evoskorpion_zm" );
    include_weapon( "evoskorpion_upgraded_zm", 0 );
    include_weapon( "ballista_zm", 0 );
    include_weapon( "ballista_upgraded_zm", 0 );
    include_weapon( "dsr50_zm" );
    include_weapon( "dsr50_upgraded_zm", 0 );
    include_weapon( "beretta93r_zm", 0 );
    include_weapon( "beretta93r_upgraded_zm", 0 );
    include_weapon( "beretta93r_extclip_zm" );
    include_weapon( "beretta93r_extclip_upgraded_zm", 0 );
    include_weapon( "kard_zm" );
    include_weapon( "kard_upgraded_zm", 0 );
    include_weapon( "fiveseven_zm", 0 );
    include_weapon( "fiveseven_upgraded_zm", 0 );
    include_weapon( "python_zm" );
    include_weapon( "python_upgraded_zm", 0 );
    include_weapon( "c96_zm", 0 );
    include_weapon( "c96_upgraded_zm", 0 );
    include_weapon( "fivesevendw_zm" );
    include_weapon( "fivesevendw_upgraded_zm", 0 );
    include_weapon( "m32_zm" );
    include_weapon( "m32_upgraded_zm", 0 );
    include_weapon( "beacon_zm", 0 );
    include_weapon( "tomb_shield_zm", 0 );
    include_weapon( "claymore_zm", 0 );
    include_weapon( "cymbal_monkey_zm" );
    include_weapon( "frag_grenade_zm", 0 );
    include_weapon( "knife_zm", 0 );
    include_weapon( "ray_gun_zm" );
    include_weapon( "ray_gun_upgraded_zm", 0 );
    include_weapon( "sticky_grenade_zm", 0 );
    include_weapon( "staff_air_zm", 0 );
    include_weapon( "staff_air_upgraded_zm", 0 );
    include_weapon( "staff_fire_zm", 0 );
    include_weapon( "staff_fire_upgraded_zm", 0 );
    include_weapon( "staff_lightning_zm", 0 );
    include_weapon( "staff_lightning_upgraded_zm", 0 );
    include_weapon( "staff_water_zm", 0 );
    include_weapon( "staff_water_zm_cheap", 0 );
    include_weapon( "staff_water_upgraded_zm", 0 );
    include_weapon( "staff_revive_zm", 0 );

    if ( is_true( level.raygun2_included ) && !isdemoplaying() )
    {
        include_weapon( "raygun_mark2_zm", hasdlcavailable( "dlc3" ) );
        include_weapon( "raygun_mark2_upgraded_zm", 0 );
    }
}

include_powerups()
{
    include_powerup( "nuke" );
    include_powerup( "insta_kill" );
    include_powerup( "double_points" );
    include_powerup( "full_ammo" );
    include_powerup( "fire_sale" );
    include_powerup( "free_perk" );
    include_powerup( "zombie_blood" );
    include_powerup( "bonus_points_player" );
    include_powerup( "bonus_points_team" );
}

entityspawned_tomb( localclientnum )
{
    if ( !isdefined( self.type ) )
    {
/#
        println( "Entity type undefined!" );
#/
        return;
    }

    if ( self.type == "player" )
        self thread playerspawned( localclientnum );

    if ( self.type == "vehicle" )
    {
        if ( self.vehicletype == "heli_quadrotor_zm" )
            self thread clientscripts\mp\zombies\_zm_ai_quadrotor::spawned( localclientnum );
    }
}

player_staff_charge_rumble( localclientnum, str_rumble )
{
    self endon( "stop_charge_rumble" );
    self endon( "disconnect" );
    delta_time = 0.1;
    n_max_time = 10.0;

    while ( true )
    {
        self playrumbleonentity( localclientnum, str_rumble );
        wait 0.1;
    }
}

player_staff_charge_level( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    self notify( "stop_charge_rumble" );
    str_rumble = undefined;

    switch ( newval )
    {
        case 1:
            str_rumble = "reload_small";
            break;
        case 2:
            str_rumble = "damage_light";
            break;
        case 3:
            str_rumble = "damage_heavy";
            break;
        default:
            break;
    }

    if ( isdefined( str_rumble ) )
        self thread player_staff_charge_rumble( localclientnum, str_rumble );
}

staff_charger_init( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( !isdefined( level.charger_origins ) )
        level.charger_origins = [];

    if ( newval != 0 )
        level.charger_origins[newval] = self.origin;
    else
    {
        keys = getarraykeys( level.charger_origins );

        foreach ( i in keys )
        {
            if ( !isdefined( level.charger_origins[i] ) )
                continue;

            if ( distancesquared( level.charger_origins[i], self.origin ) < 100 )
                level.charger_origins[i] = undefined;
        }
    }
}

zombie_soul_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    v_origin = self gettagorigin( "J_SpineUpper" );
    v_dest = undefined;
    closest_dist_sq = -1.0;

    if ( !isdefined( level.charger_origins ) )
        level.charger_origins = [];

    foreach ( v_charger in level.charger_origins )
    {
        dist_sq = distancesquared( self.origin, v_charger );

        if ( !isdefined( v_dest ) )
        {
            closest_dist_sq = dist_sq;
            v_dest = v_charger;
            continue;
        }

        if ( dist_sq < closest_dist_sq )
        {
            closest_dist_sq = dist_sq;
            v_dest = v_charger;
        }
    }

    if ( !isdefined( v_dest ) || !isdefined( v_origin ) )
        return;

    serverwait( localclientnum, 1.0 );

    if ( isdefined( self ) )
        v_origin = self gettagorigin( "J_SpineUpper" );

    e_fx = spawn( localclientnum, v_origin, "script_model" );
    e_fx setmodel( "tag_origin" );
    e_fx playsound( localclientnum, "zmb_squest_charge_soul_leave" );
    playfxontag( localclientnum, level._effect["staff_soul"], e_fx, "tag_origin" );
    e_fx moveto( v_dest + vectorscale( ( 0, 0, 1 ), 5.0 ), 0.5 );
    e_fx waittill( "movedone" );
    e_fx playsound( localclientnum, "zmb_squest_charge_soul_impact" );
    playfxontag( localclientnum, level._effect["staff_charge"], e_fx, "tag_origin" );
    serverwait( localclientnum, 0.3 );
    e_fx delete();
}

magicbox_shader_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    n_pieces = self zbarriergetnumpieces();

    if ( !isdefined( self.mapped_const ) )
    {
        for ( i = 0; i < n_pieces; i++ )
        {
            e_piece = self zbarriergetpiece( i );
            e_piece mapshaderconstant( localclientnum, 1, "ScriptVector0" );
        }

        self.mapped_const = 1;
    }

    if ( newval )
    {
        for ( i = 0; i < n_pieces; i++ )
        {
            e_piece = self zbarriergetpiece( i );
            e_piece setshaderconstant( localclientnum, 1, 0, 1, 0, 0 );
        }
    }
    else
    {
        for ( i = 0; i < n_pieces; i++ )
        {
            e_piece = self zbarriergetpiece( i );
            e_piece setshaderconstant( localclientnum, 1, 0, 0, 0, 0 );
        }
    }
}

angle_dif( oldangle, newangle )
{
    outvalue = ( oldangle - newangle ) % 360;

    if ( outvalue < 0 )
        outvalue = outvalue + 360;

    if ( outvalue > 180 )
        outvalue = ( outvalue - 360 ) * -1;

    return outvalue;
}

get_disc_color()
{
    for ( i = 0; i < 5; i++ )
    {
        if ( !isdefined( level.element_rotations[i] ) )
            continue;

        n_rotation = int( level.element_rotations[i] );
        n_target = int( self.angles[1] );
        diff = abs( angle_dif( n_target, n_rotation ) );

        if ( diff <= 45 )
            return i;
    }

    return 0;
}

central_crypt_disc_update_color( localclientnum, light_on )
{
    if ( !isdefined( level.element_rotations ) )
    {
        level.element_rotations = [];
        level.element_rotations[2] = 270.0;
        level.element_rotations[1] = 180.0;
        level.element_rotations[3] = 90.0;
        level.element_rotations[4] = 0.0;
    }

    if ( !isdefined( level.element_colors ) )
    {
        level.element_colors = [];
        level.element_colors[0] = vectorscale( ( 1, 1, 1 ), 0.1 );
        level.element_colors[2] = ( 0.5, 0.5, 0.1 );
        level.element_colors[1] = ( 0.5, 0.1, 0.1 );
        level.element_colors[3] = ( 0.5, 0.1, 0.5 );
        level.element_colors[4] = ( 0.1, 0.1, 0.5 );
    }

    n_color = self get_disc_color();
    v_color = level.element_colors[n_color];

    if ( isdefined( level.light_on_color ) && light_on )
        v_color = level.light_on_color;
    else if ( isdefined( level.light_off_color ) && !light_on )
        v_color = level.light_off_color;
    else if ( light_on )
        v_color = v_color * 10;

    playsound( 0, "zmb_crypt_disc_light", self.origin );
    self setshaderconstant( localclientnum, 0, v_color[0], v_color[1], v_color[2], 1.0 );
}

init_central_crypt_disc( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval == 2 )
        self thread central_crypt_disc_update_color( localclientnum, 1 );
    else
    {
        self mapshaderconstant( localclientnum, 0, "ScriptVector3" );
        self thread central_crypt_disc_update_color( localclientnum, 0 );
    }
}

switch_spark_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( isdefined( self.spark_fx ) )
    {
        stopfx( localclientnum, self.spark_fx );
        self.spark_fx = undefined;
    }

    if ( newval )
        self.spark_fx = playfxontag( localclientnum, level._effect["fx_tomb_sparks"], self, "lever_jnt" );
}

switch_cooldown_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    level notify( "stop_cooldown_fx" );

    if ( newval == 1 )
        cooldown_struct = getstruct( "cooldown_steam_1", "targetname" );
    else if ( newval == 2 )
        cooldown_struct = getstruct( "cooldown_steam_2", "targetname" );
    else if ( newval == 3 )
        cooldown_struct = getstruct( "cooldown_steam_3", "targetname" );

    if ( isdefined( cooldown_struct ) )
        cooldown_struct thread loop_cooldown_fx( localclientnum );
}

loop_cooldown_fx( localclientnum )
{
    level endon( "stop_cooldown_fx" );

    while ( true )
    {
        playfx( localclientnum, level._effect["perk_machine_steam"], self.origin );
        wait 0.1;
    }
}

teleporter_fx( localclientnum, enum )
{
    str_fx = "teleport_air";

    switch ( enum )
    {
        case 1:
            str_fx = "teleport_fire";
            break;
        case 4:
            str_fx = "teleport_ice";
            break;
        case 3:
            str_fx = "teleport_elec";
            break;
        case 2:
        default:
            str_fx = "teleport_air";
            break;
    }

    self.fx_element_glow = playfxontag( localclientnum, level._effect[str_fx], self, "tag_origin" );
}

crystal_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval >= 5 )
    {
        element_enum = newval - 4;
        teleporter_fx( localclientnum, element_enum );
        return;
    }

    if ( newval == 1 )
        self.fx_element_glow = playfxontag( localclientnum, level._effect["fire_glow"], self, "tag_origin" );
    else if ( newval == 2 )
        self.fx_element_glow = playfxontag( localclientnum, level._effect["air_glow"], self, "tag_origin" );
    else if ( newval == 3 )
        self.fx_element_glow = playfxontag( localclientnum, level._effect["elec_glow"], self, "tag_origin" );
    else if ( newval == 4 )
        self.fx_element_glow = playfxontag( localclientnum, level._effect["ice_glow"], self, "tag_origin" );
    else if ( newval == 0 )
        stopfx( localclientnum, self.fx_element_glow );
}

stone_frozen_shader( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    self endon( "entityshutdown" );

    if ( newval )
    {
        self mapshaderconstant( localclientnum, 0, "ScriptVector3" );

        for ( f = 0.0; f <= 1.0; f = f + 0.01 )
        {
            self setshaderconstant( localclientnum, 0, f, f, f, f );
            serverwait( localclientnum, 0.0166 );
        }
    }
}

sky_pillar_fade( localclientnum, fade_in, fade_time )
{
    self notify( "sky_pillar_fade_stop" );
    self endon( "sky_pillar_fade_stop" );
    self endon( "entityshutdown" );
    start_val = 0.0;
    end_val = 1.0;

    if ( fade_in )
    {
        start_val = 1.0;
        end_val = 0.0;
    }

    frame_time = 0.0166;
    num_steps = int( fade_time / frame_time );
    step_size = 1.0 / num_steps;

    for ( i = 0; i < num_steps; i++ )
    {
        pct = step_size * i;

        if ( pct < 0.0 )
            pct = 0.0;
        else if ( pct > 1.0 )
            pct = 1.0;

        value = lerpfloat( start_val, end_val, pct );
        self setshaderconstant( localclientnum, 0, value, value, value, value );
        serverwait( localclientnum, frame_time );
    }
}

sky_pillar_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval == 1 )
    {
        self mapshaderconstant( localclientnum, 0, "ScriptVector0" );
        self thread sky_pillar_fade( localclientnum, 1, 1.0 );
        playsound( 0, "zmb_squest_crystal_sky_pillar_start", ( 3, 0, 218 ) );
        soundlineemitter( "zmb_squest_light_beam", ( 1, -14, -685 ), ( -8, 5, 530 ) );
/#
        println( "Sky Pillar Fading In" );
#/
    }
    else
    {
        self thread sky_pillar_fade( localclientnum, 0, 4.0 );
        playsound( 0, "zmb_squest_crystal_sky_pillar_stop", ( 3, 0, 218 ) );
        soundstoplineemitter( "zmb_squest_light_beam", ( 1, -14, -685 ), ( -8, 5, 530 ) );
/#
        println( "Sky Pillar Fading Out" );
#/
    }
}

player_rumble_and_shake( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    self endon( "disconnect" );

    if ( newval == 4 )
        self thread player_continuous_rumble( localclientnum, 1 );
    else if ( newval == 5 )
        self thread player_continuous_rumble( localclientnum, 2 );
    else if ( newval == 3 )
    {
        self earthquake( 0.6, 1.5, self.origin, 100 );
        self playrumbleonentity( localclientnum, "artillery_rumble" );
        level thread clientscripts\mp\zm_tomb_amb::snd_shake_hvy();
    }
    else if ( newval == 2 )
    {
        self earthquake( 0.3, 1.5, self.origin, 100 );
        self playrumbleonentity( localclientnum, "shotgun_fire" );
        level thread clientscripts\mp\zm_tomb_amb::snd_shake_med();
    }
    else if ( newval == 1 )
    {
        self earthquake( 0.1, 1.0, self.origin, 100 );
        self playrumbleonentity( localclientnum, "damage_heavy" );
        level thread clientscripts\mp\zm_tomb_amb::snd_shake_lgt();
    }
    else if ( newval == 6 )
        self thread player_continuous_rumble( localclientnum, 1, 0 );
    else
        self notify( "stop_rumble_and_shake" );
}

player_continuous_rumble( localclientnum, rumble_level, shake_camera )
{
    if ( !isdefined( shake_camera ) )
        shake_camera = 1;

    self notify( "stop_rumble_and_shake" );
    self endon( "disconnect" );
    self endon( "stop_rumble_and_shake" );

    while ( true )
    {
        if ( isdefined( self ) && self islocalplayer() && isdefined( self ) )
        {
            if ( rumble_level == 1 )
            {
                if ( shake_camera )
                    self earthquake( 0.2, 1.0, self.origin, 100 );

                self playrumbleonentity( localclientnum, "reload_small" );
                wait 0.05;
            }
            else
            {
                if ( shake_camera )
                    self earthquake( 0.3, 1.0, self.origin, 100 );

                self playrumbleonentity( localclientnum, "damage_light" );
            }
        }

        wait 0.1;
    }
}

crypt_open( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    clientscripts\mp\_fx::activate_exploder( 222 );
}

toggle_lantern_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    a_lantern_names = array( "phys_lantern01", "phys_lantern02", "phys_lantern03", "phys_lantern04", "phys_lantern05", "phys_lantern06", "phys_lantern07", "phys_lantern08", "phys_lantern09", "phys_lantern10", "phys_lantern11", "phys_lantern12", "phys_lantern13", "phys_lantern14", "phys_lantern15", "phys_lantern16", "phys_lantern17", "phys_lantern18", "phys_lantern19" );
    a_lanterns = [];

    foreach ( str_name in a_lantern_names )
        a_lanterns = arraycombine( a_lanterns, getdynentarray( str_name ), 0, 0 );

    if ( newval )
    {
        foreach ( lantern in a_lanterns )
            lantern lantern_fx_enable( localclientnum );
    }
    else
    {
        foreach ( lantern in a_lanterns )
            lantern lantern_fx_disable( localclientnum );
    }
}

lantern_fx_enable( localclientnumber )
{
    self lantern_fx_disable( localclientnumber );
    self.a_fx[localclientnumber] = playfxondynent( level._effect["fx_tomb_light_expensive"], self );
}

lantern_fx_disable( localclientnumber )
{
    if ( !isdefined( self.a_fx ) )
        self.a_fx = [];

    if ( isdefined( self.a_fx[localclientnumber] ) )
        deletefx( localclientnumber, self.a_fx[localclientnumber], 1 );
}

set_level_rain( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    level.weather_rain = newval;
}

set_level_snow( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    level.weather_snow = newval;
}

set_player_snow( localclientnum )
{
    if ( !isdefined( level.sndweather ) )
        level thread clientscripts\mp\zm_tomb_amb::sndweathersetup();

    if ( level.weather_snow == 0 )
    {
        level notify( "_snow_thread" + localclientnum );
        level.sndweather.issnow = 0;
    }
    else
    {
        self thread _snow_thread( level.weather_snow, localclientnum );
        level.sndweather.issnow = 1;
    }

    level thread sndweatherupdate( self );
}

set_player_rain( localclientnum )
{
    if ( !isdefined( level.sndweather ) )
        level thread clientscripts\mp\zm_tomb_amb::sndweathersetup();

    if ( !isdefined( self.b_lightning ) )
        self.b_lightning = 0;

    if ( level.weather_rain == 0 )
    {
        level notify( "_rain_thread" + localclientnum );
        self.b_lightning = 0;
        level.sndweather.israin = 0;
    }
    else
    {
        if ( is_false( self.b_lightning ) )
            self thread _lightning_thread( localclientnum );

        self thread _rain_thread( level.weather_rain, localclientnum );
        level.sndweather.israin = 1;
    }

    level thread sndweatherupdate( self );
}

set_player_weather_visionset( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    n_suncolor_lerp_time = 10;

    if ( bnewent || binitialsnap || bwasdemojump )
        n_suncolor_lerp_time = 0.0;

    if ( isdefined( self ) )
    {
        self set_player_rain( localclientnum );
        self set_player_snow( localclientnum );
    }

    if ( newval == 0 || newval == 3 )
    {
        fog_vol_to_visionset_set_suffix( "" );

        if ( getdvarint( #"splitscreen_playerCount" ) > 2 )
            setworldfogactivebank( localclientnum, 9 );
        else
            setworldfogactivebank( localclientnum, 1 );

        src_suncolor = getdvar( #"r_lightTweakSunColor" );
        lerp_suncolor_dvar( localclientnum, src_suncolor, "0.380056 0.775788 1", n_suncolor_lerp_time );
    }
    else if ( newval == 1 )
    {
        fog_vol_to_visionset_set_suffix( "_rain" );

        if ( getdvarint( #"splitscreen_playerCount" ) > 2 )
            setworldfogactivebank( localclientnum, 10 );
        else
            setworldfogactivebank( localclientnum, 2 );

        src_suncolor = getdvar( #"r_lightTweakSunColor" );
        lerp_suncolor_dvar( localclientnum, src_suncolor, "0.380056 0.775788 1", n_suncolor_lerp_time );
    }
    else if ( newval == 2 )
    {
        fog_vol_to_visionset_set_suffix( "_snow" );

        if ( getdvarint( #"splitscreen_playerCount" ) > 2 )
            setworldfogactivebank( localclientnum, 12 );
        else
            setworldfogactivebank( localclientnum, 4 );

        src_suncolor = getdvar( #"r_lightTweakSunColor" );
        lerp_suncolor_dvar( localclientnum, src_suncolor, "0.769943 0.894102 1", n_suncolor_lerp_time );
    }
}

lerp_suncolor_dvar( localclientnum, src_suncolor, tgt_suncolor, n_lerp_time )
{
    self endon( "entityshutdown" );
    a_src_suncolor = strtok( src_suncolor, " " );
    a_tgt_suncolor = strtok( tgt_suncolor, " " );
    a_src_suncolor[0] = float( a_src_suncolor[0] );
    a_src_suncolor[1] = float( a_src_suncolor[1] );
    a_src_suncolor[2] = float( a_src_suncolor[2] );
    a_tgt_suncolor[0] = float( a_tgt_suncolor[0] );
    a_tgt_suncolor[1] = float( a_tgt_suncolor[1] );
    a_tgt_suncolor[2] = float( a_tgt_suncolor[2] );
    n_time_delta = 0;

    if ( n_lerp_time > 0 )
    {
        do
        {
            serverwait( localclientnum, 0.05 );
            n_time_delta = n_time_delta + 0.05;
            suncolor_r_curr_val = lerpfloat( a_src_suncolor[0], a_tgt_suncolor[0], n_time_delta / n_lerp_time );
            suncolor_g_curr_val = lerpfloat( a_src_suncolor[1], a_tgt_suncolor[1], n_time_delta / n_lerp_time );
            suncolor_b_curr_val = lerpfloat( a_src_suncolor[2], a_tgt_suncolor[2], n_time_delta / n_lerp_time );
            setsaveddvar( "r_lightTweakSunColor", "" + suncolor_r_curr_val + " " + suncolor_g_curr_val + " " + suncolor_b_curr_val );
        }
        while (n_time_delta < n_lerp_time );
    }

    setsaveddvar( "r_lightTweakSunColor", "" + a_tgt_suncolor[0] + " " + a_tgt_suncolor[1] + " " + a_tgt_suncolor[2] );
}

sndweatherupdate( player )
{
    level notify( "sndWeatherUpdating" );
    level endon( "sndWeatherUpdating" );
    wait 0.5;
    level notify( "sndWeatherUpdate" );
    player thread sndupdateroomweather();
}

sndupdateroomweather()
{
    wait 0.1;
    name = level.activeambientpackage;

    if ( isdefined( level.sndambweathernames ) && isinarray( level.sndambweathernames, name ) )
    {
        playsound( 0, "amb_thunder_flash_2d", ( 0, 0, 0 ) );
        stoploopsound( 0, level.ambientrooms[name].ent, level.ambientrooms[name].fadeout );
        wait 0.5;
        level.ambientrooms[name].id = playloopsound( 0, level.ambientrooms[name].ent, level.ambientrooms[name].tone, level.ambientrooms[name].fadein );
    }
}

_rain_thread( n_level, localclientnum )
{
    level notify( "_rain_thread" + localclientnum );
    level notify( "_rain_begin" + localclientnum );
    level endon( "_snow_begin" + localclientnum );
    level endon( "_rain_thread" + localclientnum );
    self endon( "disconnect" );
    self endon( "entityshutdown" );
    n_wait = 0.35 / n_level;

    if ( n_wait < 0.15 )
        n_wait = 0.15;

    while ( true )
    {
        if ( !isdefined( self ) )
            return;

        playfx( localclientnum, level._effect["player_rain"], self.origin );
        wait( n_wait );
    }
}

_snow_thread( n_level, localclientnum )
{
    level notify( "_snow_thread" + localclientnum );
    level notify( "_snow_begin" + localclientnum );
    level endon( "_rain_begin" + localclientnum );
    level endon( "_snow_thread" + localclientnum );
    self endon( "disconnect" );
    self endon( "entityshutdown" );
    n_wait = 0.5 / n_level;
    self.b_lightning = 0;

    while ( true )
    {
        if ( !isdefined( self ) )
            return;

        playfx( localclientnum, level._effect["player_snow"], self.origin );
        wait( n_wait );
    }
}

_lightning_thread( localclientnum )
{
    self endon( "disconnect" );
    self endon( "entityshutdown" );
    self.b_lightning = 1;

    if ( localclientnum != 0 )
        return;

    level notify( "_lightning_thread" + localclientnum );
    level endon( "_lightning_thread" + localclientnum );

    if ( isdefined( localclientnum ) )
    {
        self waittill_dobj( localclientnum );

        while ( is_true( self.b_lightning ) )
        {
            v_p_angles = self.angles;
            v_forward = anglestoforward( self.angles ) * 25000;
            v_end_pos = self.origin + ( v_forward[0], v_forward[1], 0 );
            v_offset = ( randomintrange( -5000, 5000 ), randomintrange( -5000, 5000 ), randomint( 3000 ) );
            v_end_pos = v_end_pos + v_offset;
            playfx( localclientnum, level._effect["lightning_flash"], v_end_pos );
            playsound( 0, "amb_thunder_clap_zm", v_end_pos );
            serverwait( localclientnum, randomfloatrange( 0.2, 0.3 ) );
            self thread _lightning_disconnect_thread( localclientnum );
            n_strikes = randomintrange( 3, 5 );

            for ( i = 0; i < n_strikes; i++ )
            {
                serverwait( localclientnum, 0.1 );
                n_blend_time = randomfloatrange( 0.1, 0.35 );
                playsound( 0, "amb_thunder_flash_zm", v_end_pos );
                setsaveddvar( "r_lightTweakSunLight", randomfloatrange( 28, 32 ) );
                lerp_dvar( "r_lightTweakSunLight", level.n_level_sunlight, n_blend_time, 1, localclientnum );
            }

            self notify( "lightning_done" );
            serverwait( localclientnum, randomfloatrange( 5.0, 10.0 ) );
        }
    }
}

_lightning_disconnect_thread( localclientnum )
{
    self endon( "lightning_done" );
    self waittill( "_lightning_thread" + localclientnum );
    setsaveddvar( "r_lightTweakSunLight", level.n_level_sunlight );
}

lerp_dvar( str_dvar, n_val, n_lerp_time, b_saved_dvar, localclientnum )
{
    n_start_val = getdvarfloat( str_dvar );
    n_time_delta = 0;

    do
    {
        serverwait( localclientnum, 0.05 );
        n_time_delta = n_time_delta + 0.05;
        n_curr_val = lerpfloat( n_start_val, n_val, n_time_delta / n_lerp_time );

        if ( is_true( b_saved_dvar ) )
        {
            setsaveddvar( str_dvar, n_curr_val );
            continue;
        }

        setdvar( str_dvar, n_curr_val );
    }
    while (n_time_delta < n_lerp_time );

    if ( is_true( b_saved_dvar ) )
        setsaveddvar( str_dvar, n_val );
    else
        setdvar( str_dvar, n_val );
}

player_tablet_state( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{

}

foot_print_box_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    a_structs = getstructarray( "foot_box_pos", "targetname" );
    s_box = get_array_of_closest( self.origin, a_structs )[0];
    e_fx = spawn( localclientnum, self gettagorigin( "J_SpineUpper" ), "script_model" );
    e_fx setmodel( "tag_origin" );
    e_fx playsound( localclientnum, "zmb_squest_charge_soul_leave" );
    playfxontag( localclientnum, level._effect["staff_soul"], e_fx, "tag_origin" );
    e_fx moveto( s_box.origin, 1 );
    e_fx waittill( "movedone" );
    playsound( localclientnum, "zmb_squest_charge_soul_impact", e_fx.origin );
    playfxontag( localclientnum, level._effect["staff_charge"], e_fx, "tag_origin" );
    wait 0.3;
    e_fx delete();
}

foot_print_box_glow( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    self waittill_dobj( localclientnum );

    if ( newval == 1 )
    {
        if ( !isdefined( self.fx_glow ) )
        {
            self.fx_glow = playfxontag( localclientnum, level._effect["foot_box_glow"], self, "tag_origin" );
            self thread foot_print_box_glow_in( localclientnum );
        }

        if ( !isdefined( self.sndent ) )
        {
            self.sndent = spawn( 0, self.origin, "script_origin" );
            self.sndent playloopsound( "zmb_footprintbox_glow_lp", 1 );
            self.sndent thread snddemojumpmonitor();
        }
    }
    else
    {
        if ( isdefined( self.fx_glow ) )
        {
            stopfx( localclientnum, self.fx_glow );
            self.fx_glow = undefined;
            self thread foot_print_box_glow_out( localclientnum );
        }

        if ( isdefined( self.sndent ) )
        {
            self.sndent delete();
            self.sndent = undefined;
        }
    }
}

snddemojumpmonitor()
{
    self endon( "entityshutdown" );
    level waittill( "demo_jump" );
    self delete();
}

foot_print_box_glow_in( localclientnum )
{
    self endon( "entityshutdown" );
    self mapshaderconstant( localclientnum, 0, "ScriptVector1" );
    s_timer = new_timer( localclientnum );
    n_phase_in = 1;

    do
    {
        serverwait( localclientnum, 0.11 );
        n_current_time = s_timer get_time_in_seconds();
        n_delta_val = lerpfloat( 1, 0, n_current_time / n_phase_in );
        self setshaderconstant( localclientnum, 0, n_delta_val, 0, 0, 0 );
    }
    while (n_current_time < n_phase_in );
}

foot_print_box_glow_out( localclientnum )
{
    self endon( "entityshutdown" );
    self mapshaderconstant( localclientnum, 0, "ScriptVector1" );
    s_timer = new_timer( localclientnum );
    n_phase_in = 1;

    do
    {
        serverwait( localclientnum, 0.11 );
        n_current_time = s_timer get_time_in_seconds();
        n_delta_val = lerpfloat( 0, 1, n_current_time / n_phase_in );
        self setshaderconstant( localclientnum, 0, n_delta_val, 0, 0, 0 );
    }
    while (n_current_time < n_phase_in );
}

timer_increment_loop( localclientnum )
{
    while ( isdefined( self ) )
    {
        serverwait( localclientnum, 0.016 );
        self.n_time_current = self.n_time_current + 0.016;
    }
}

new_timer( localclientnum )
{
    s_timer = spawnstruct();
    s_timer.n_time_current = 0;
    s_timer thread timer_increment_loop( localclientnum );
    return s_timer;
}

get_time()
{
    return self.n_time_current * 1000;
}

get_time_in_seconds()
{
    return self.n_time_current;
}

reset_timer()
{
    self.n_time_current = 0;
}

zm_tomb_zombie_eyes_think( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval )
    {
        if ( isdefined( self ) && isdefined( self._aitype ) && self._aitype == "zm_tomb_basic_crusader" )
        {
            self._eyeglow_fx_override = level._effect["eye_glow_blue"];
            self deletezombieeyes( localclientnum );
            self createzombieeyes( localclientnum );
            self mapshaderconstant( localclientnum, 0, "scriptVector2", 0, level.eyeball_luminance_override, 0 );
        }
    }
}
