// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\createfx\zm_tomb_fx;
#include clientscripts\mp\_fx;

precache_util_fx()
{

}

precache_scripted_fx()
{
    level._effect["eye_glow"] = loadfx( "misc/fx_zombie_eye_single" );
    level._effect["eye_glow_blue"] = loadfx( "maps/zombie/fx_zombie_eye_single_blue" );
    level._effect["headshot"] = loadfx( "impacts/fx_flesh_hit" );
    level._effect["headshot_nochunks"] = loadfx( "misc/fx_zombie_bloodsplat" );
    level._effect["bloodspurt"] = loadfx( "misc/fx_zombie_bloodspurt" );
    level._effect["animscript_gib_fx"] = loadfx( "weapon/bullet/fx_flesh_gib_fatal_01" );
    level._effect["animscript_gibtrail_fx"] = loadfx( "trail/fx_trail_blood_streak" );
    level._effect["m14_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_rifle" );
    level._effect["fx_tomb_ee_vortex"] = loadfx( "maps/zombie_tomb/fx_tomb_ee_vortex" );
    level._effect["robot_foot_stomp"] = loadfx( "maps/zombie_tomb/fx_tomb_robot_dust" );
    level._effect["eject_warning"] = loadfx( "maps/zombie_tomb/fx_tomb_robot_eject_warning" );
    level._effect["eject_steam"] = loadfx( "maps/zombie_tomb/fx_tomb_robot_eject_steam" );
    level._effect["giant_robot_footstep_warning_light"] = loadfx( "maps/zombie_tomb/fx_tomb_foot_warning_light_red" );
    level._effect["mechz_death"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_death" );
    level._effect["mechz_sparks"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_dmg_sparks" );
    level._effect["mechz_steam"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_dmg_steam" );
    level._effect["mechz_claw"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_wpn_claw" );
    level._effect["mechz_claw_arm"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_wpn_source" );
    level._effect["mech_booster_landing"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_jump_landing" );
    level._effect["staff_charge"] = loadfx( "weapon/zmb_staff/fx_zmb_staff_charge" );
    level._effect["staff_soul"] = loadfx( "weapon/zmb_staff/fx_zmb_staff_charge_souls" );
    level._effect["fire_muzzle"] = loadfx( "weapon/zmb_staff/fx_zmb_staff_fire_muz_flash_1p" );
    level._effect["air_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_elem_reveal_air_glow" );
    level._effect["elec_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_elem_reveal_elec_glow" );
    level._effect["fire_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_elem_reveal_fire_glow" );
    level._effect["ice_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_elem_reveal_ice_glow" );
    level._effect["teleport_air"] = loadfx( "maps/zombie_tomb/fx_tomb_portal_air" );
    level._effect["teleport_elec"] = loadfx( "maps/zombie_tomb/fx_tomb_portal_elec" );
    level._effect["teleport_fire"] = loadfx( "maps/zombie_tomb/fx_tomb_portal_fire" );
    level._effect["teleport_ice"] = loadfx( "maps/zombie_tomb/fx_tomb_portal_ice" );
    level._effect["tesla_elec_kill"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_afterlife_zmb_tport" );
    level._effect["capture_progression"] = loadfx( "maps/zombie_tomb/fx_tomb_capture_progression" );
    level._effect["capture_complete"] = loadfx( "maps/zombie_tomb/fx_tomb_capture_complete" );
    level._effect["capture_exhaust"] = loadfx( "maps/zombie_tomb/fx_tomb_capture_exhaust_back" );
    level._effect["screecher_hole"] = loadfx( "maps/zombie_tomb/fx_tomb_screecher_vortex" );
    level._effect["zone_capture_zombie_torso_fx"] = loadfx( "maps/zombie_tomb/fx_tomb_crusader_torso_loop" );
    level._effect["crusader_zombie_eyes"] = loadfx( "maps/zombie/fx_zombie_crusader_eyes" );
    level._effect["player_rain"] = loadfx( "maps/zombie_tomb/fx_tomb_player_weather_rain" );
    level._effect["player_snow"] = loadfx( "maps/zombie_tomb/fx_tomb_player_weather_snow" );
    level._effect["lightning_flash"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_lightning_lg" );
    level._effect["tank_treads"] = loadfx( "maps/zombie_tomb/fx_tomb_veh_tank_treadfx_mud" );
    level._effect["mech_wpn_flamethrower"] = loadfx( "maps/zombie_tomb/fx_tomb_mech_wpn_flamethrower" );
    level._effect["tank_light_grn"] = loadfx( "maps/zombie_tomb/fx_tomb_capture_light_green" );
    level._effect["tank_light_red"] = loadfx( "maps/zombie_tomb/fx_tomb_capture_light_red" );
    level._effect["tank_overheat"] = loadfx( "maps/zombie_tomb/fx_tomb_veh_tank_exhaust_overheat" );
    level._effect["tank_exhaust"] = loadfx( "maps/zombie_tomb/fx_tomb_veh_tank_exhaust" );
    level._effect["zapper_light_ready"] = loadfx( "maps/zombie_tomb/fx_tomb_capture_light_green" );
    level._effect["zapper_light_notready"] = loadfx( "maps/zombie_tomb/fx_tomb_capture_light_red" );
    level._effect["bottle_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_dieselmagic_portal" );
    level._effect["perk_pipe_smoke"] = loadfx( "maps/zombie_tomb/fx_tomb_perk_machine_exhaust" );
    level._effect["wagon_fire"] = loadfx( "maps/zombie_tomb/fx_tomb_ee_fire_wagon" );
    level._effect["fist_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_ee_fists" );
    level._effect["air_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_elem_reveal_air_glow" );
    level._effect["ee_vortex"] = loadfx( "maps/zombie_tomb/fx_tomb_ee_vortex" );
    level._effect["ee_beam"] = loadfx( "maps/zombie_tomb/fx_tomb_ee_beam" );
    level._effect["foot_box_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_challenge_fire" );
    level._effect["sky_plane_tracers"] = loadfx( "maps/zombie_tomb/fx_tomb_sky_plane_tracers" );
    level._effect["sky_plane_trail"] = loadfx( "maps/zombie_tomb/fx_tomb_sky_plane_trail" );
}

precache_createfx_fx()
{
    level._effect["fx_sky_dist_aa_tracers"] = loadfx( "maps/zombie_tomb/fx_tomb_sky_dist_aa_tracers" );
    level._effect["fx_tomb_vortex_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_vortex_glow" );
    level._effect["fx_pack_a_punch"] = loadfx( "maps/zombie_tomb/fx_tomb_pack_a_punch_light_beams" );
    level._effect["fire_sacrifice_flame"] = loadfx( "maps/zombie_tomb/fx_tomb_puzzle_fire_sacrifice" );
    level._effect["fx_tomb_dust_fall"] = loadfx( "maps/zombie_tomb/fx_tomb_dust_fall" );
    level._effect["fx_tomb_dust_fall_lg"] = loadfx( "maps/zombie_tomb/fx_tomb_dust_fall_lg" );
    level._effect["fx_tomb_embers_flat"] = loadfx( "maps/zombie_tomb/fx_tomb_embers_flat" );
    level._effect["fx_tomb_fire_lg"] = loadfx( "maps/zombie_tomb/fx_tomb_fire_lg" );
    level._effect["fx_tomb_fire_sm"] = loadfx( "maps/zombie_tomb/fx_tomb_fire_sm" );
    level._effect["fx_tomb_fire_line_sm"] = loadfx( "maps/zombie_tomb/fx_tomb_fire_line_sm" );
    level._effect["fx_tomb_fire_sm_smolder"] = loadfx( "maps/zombie_tomb/fx_tomb_fire_sm_smolder" );
    level._effect["fx_tomb_ground_fog"] = loadfx( "maps/zombie_tomb/fx_tomb_ground_fog" );
    level._effect["fx_tomb_sparks"] = loadfx( "maps/zombie_tomb/fx_tomb_sparks" );
    level._effect["fx_tomb_water_drips"] = loadfx( "maps/zombie_tomb/fx_tomb_water_drips" );
    level._effect["fx_tomb_water_drips_sm"] = loadfx( "maps/zombie_tomb/fx_tomb_water_drips_sm" );
    level._effect["fx_tomb_smoke_pillar_xlg"] = loadfx( "maps/zombie_tomb/fx_tomb_smoke_pillar_xlg" );
    level._effect["fx_tomb_godray_md"] = loadfx( "maps/zombie_tomb/fx_tomb_godray_md" );
    level._effect["fx_tomb_godray_mist_md"] = loadfx( "maps/zombie_tomb/fx_tomb_godray_mist_md" );
    level._effect["fx_tomb_dust_motes_md"] = loadfx( "maps/zombie_tomb/fx_tomb_dust_motes_md" );
    level._effect["fx_tomb_dust_motes_lg"] = loadfx( "maps/zombie_tomb/fx_tomb_dust_motes_lg" );
    level._effect["fx_tomb_light_md"] = loadfx( "maps/zombie_tomb/fx_tomb_light_md" );
    level._effect["fx_tomb_light_lg"] = loadfx( "maps/zombie_tomb/fx_tomb_light_lg" );
    level._effect["fx_tomb_light_expensive"] = loadfx( "maps/zombie_tomb/fx_tomb_light_expensive" );
    level._effect["fx_tomb_steam_md"] = loadfx( "maps/zombie_tomb/fx_tomb_steam_md" );
    level._effect["fx_tomb_steam_lg"] = loadfx( "maps/zombie_tomb/fx_tomb_steam_lg" );
    level._effect["fx_tomb_church_fire_vista"] = loadfx( "maps/zombie_tomb/fx_tomb_church_fire_vista" );
    level._effect["fx_tomb_church_custom"] = loadfx( "maps/zombie_tomb/fx_tomb_church_custom" );
    level._effect["fx_tomb_chamber_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_chamber_glow" );
    level._effect["fx_tomb_chamber_glow_blue"] = loadfx( "maps/zombie_tomb/fx_tomb_chamber_glow_blue" );
    level._effect["fx_tomb_chamber_glow_purple"] = loadfx( "maps/zombie_tomb/fx_tomb_chamber_glow_purple" );
    level._effect["fx_tomb_chamber_glow_yellow"] = loadfx( "maps/zombie_tomb/fx_tomb_chamber_glow_yellow" );
    level._effect["fx_tomb_chamber_glow_red"] = loadfx( "maps/zombie_tomb/fx_tomb_chamber_glow_red" );
    level._effect["fx_tomb_chamber_walls_impact"] = loadfx( "maps/zombie_tomb/fx_tomb_chamber_walls_impact" );
    level._effect["fx_tomb_crafting_chamber_glow"] = loadfx( "maps/zombie_tomb/fx_tomb_crafting_chamber_glow" );
    level._effect["fx_tomb_probe_elec_on"] = loadfx( "maps/zombie_tomb/fx_tomb_probe_elec_on" );
    level._effect["fx_tomb_robot_ambient"] = loadfx( "maps/zombie_tomb/fx_tomb_robot_ambient" );
    level._effect["fx_tomb_skybox_vortex"] = loadfx( "maps/zombie_tomb/fx_tomb_skybox_vortex" );
}

main()
{
    clientscripts\mp\createfx\zm_tomb_fx::main();
    clientscripts\mp\_fx::reportnumeffects();
    precache_util_fx();
    precache_createfx_fx();
    precache_fxanim_props();
    precache_fxanim_props_dlc4();
    disablefx = getdvarint( #"disable_fx" );

    if ( !isdefined( disablefx ) || disablefx <= 0 )
        precache_scripted_fx();

    level thread trap_fx_monitor( "flame_trap", "str_flame_trap" );
}

#using_animtree("fxanim_props");

precache_fxanim_props()
{
    level.scr_anim["fxanim_props"]["dogfights"] = %fxanim_zom_tomb_dogfights_anim;
}

fxanim_props_think( localclientnum )
{
    self endon( "death" );
    self endon( "entityshutdown" );
    self endon( "delete" );
    wait 3;
    self useanimtree( #animtree );
    self thread fxanim_props_wait_1( localclientnum );
}

#using_animtree("fxanim_props_dlc4");

precache_fxanim_props_dlc4()
{
    level.scr_anim["fxanim_props_dlc4"]["church_wires"] = %fxanim_zom_tomb_church_wires_anim;
    level.scr_anim["fxanim_props_dlc4"]["no_mans_wire"] = %fxanim_zom_tomb_no_mans_wire_anim;
    level.scr_anim["fxanim_props_dlc4"]["float_bunker"] = %fxanim_zom_tomb_debris_float_bunker_anim;
    level.scr_anim["fxanim_props_dlc4"]["chamber_rocks01"] = %fxanim_zom_tomb_chamber_rocks01_anim;
    level.scr_anim["fxanim_props_dlc4"]["chamber_rocks02"] = %fxanim_zom_tomb_chamber_rocks02_anim;
    level.scr_anim["fxanim_props_dlc4"]["head_fans"] = %fxanim_zom_tomb_robot_head_fans_anim;
    level.scr_anim["fxanim_props_dlc4"]["church_drain"] = %fxanim_zom_tomb_church_drain_anim;
    level.scr_anim["fxanim_props_dlc4"]["wires_ruins"] = %fxanim_zom_tomb_wires_ruins_anim;
    level.scr_anim["fxanim_props_dlc4"]["pap_ropes"] = %fxanim_zom_tomb_pap_ropes_anim;
    level.scr_anim["fxanim_props_dlc4"]["church_ceiling"] = %fxanim_zom_tomb_church_ceiling_anim;
    level.scr_anim["fxanim_props_dlc4"]["crane_hook"] = %fxanim_zom_tomb_crane_hook_anim;
}

fxanim_props_think_dlc4( localclientnum )
{
    self endon( "death" );
    self endon( "entityshutdown" );
    self endon( "delete" );
    wait 4;
    self useanimtree( #animtree );
    self thread fxanim_props_wait_1( localclientnum );
}

setup_prop_anims()
{
    waitforclient( 0 );
    players = level.localplayers;

    for ( i = 0; i < players.size; i++ )
        players[i] thread play_fx_prop_anims( i );
}

play_fx_prop_anims( localclientnum )
{
    fxanim_props = getentarray( localclientnum, "fxanim", "targetname" );
    array_thread( fxanim_props, ::fxanim_props_think, localclientnum );
    fxanim_props = getentarray( localclientnum, "fxanim_dlc4", "targetname" );
    array_thread( fxanim_props, ::fxanim_props_think_dlc4, localclientnum );
}

fxanim_props_wait_1( localclientnum )
{
    if ( isdefined( self.fxanim_waittill_1 ) )
        level waittill( self.fxanim_waittill_1 );

    if ( isdefined( self.fxanim_wait ) )
        wait( self.fxanim_wait );

    if ( isdefined( self.fxanim_scene_1 ) )
    {
        if ( isdefined( level.scr_anim["fxanim_props"][self.fxanim_scene_1] ) )
            self setflaggedanim( "tomb_fxanim", level.scr_anim["fxanim_props"][self.fxanim_scene_1], 1.0, 0.0, 1.0 );

        if ( isdefined( level.scr_anim["fxanim_props_dlc4"][self.fxanim_scene_1] ) )
        {
            if ( issubstr( self.fxanim_scene_1, "chamber_rocks" ) )
                self thread chamber_rocks_think();
            else
                self setflaggedanim( "tomb_fxanim", level.scr_anim["fxanim_props_dlc4"][self.fxanim_scene_1], 1.0, 0.0, 1.0 );
        }
    }
}

chamber_rocks_think()
{
    self endon( "death" );
    self endon( "entityshutdown" );
    self endon( "delete" );

    while ( true )
    {
        self setflaggedanim( "tomb_fxanim", level.scr_anim["fxanim_props_dlc4"][self.fxanim_scene_1], 1.0, 0.0, 1.0 );
        self waittillmatch( "tomb_fxanim", "end" );
        self hide();
        self clearanim( %root, 0 );
        self show();
        wait( randomfloatrange( 10, 30 ) );
    }
}

trap_fx_monitor( str_name, str_side )
{
    while ( true )
    {
        level waittill( str_name );
        a_trap_points = getstructarray( str_name, "targetname" );

        for ( i = 0; i < a_trap_points.size; i++ )
        {
            if ( str_name == "flame_trap" )
                a_trap_points[i] thread flame_trap_fx( str_name, str_side );
        }
    }
}

flame_trap_fx( str_name, str_side )
{
    vec_ang = self.angles;
    vec_forward = anglestoforward( vec_ang );

    if ( isdefined( self.a_loopfx ) )
    {
        for ( i = 0; i < self.a_loopfx.size; i++ )
            stopfx( i, self.a_loopfx[i] );

        self.a_loopfx = [];
    }

    if ( !isdefined( self.a_loopfx ) )
        self.a_loopfx = [];

    a_players = getlocalplayers();

    for ( i = 0; i < a_players.size; i++ )
    {
        self.a_loopfx[i] = playfx( i, level._effect["flame_trap_start"], self.origin, vec_forward );
        wait 1;
        level.b_play_fire_loop_fx = 1;
        level thread monitor_fire_loop();

        while ( level.b_play_fire_loop_fx )
        {
            self.a_loopfx[i] = playfx( i, level._effect["flame_trap_loop"], self.origin, vec_forward );
            wait 1;
        }

        self.a_loopfx[i] = playfx( i, level._effect["flame_trap_start"], self.origin, vec_forward );
        wait 1;
    }

    level waittill( str_side + "off" );

    for ( i = 0; i < self.a_loopfx.size; i++ )
        stopfx( i, self.a_loopfx[i] );

    self.a_loopfx = [];
}

monitor_fire_loop()
{
    wait 25;
    level.b_play_fire_loop_fx = 0;
}
