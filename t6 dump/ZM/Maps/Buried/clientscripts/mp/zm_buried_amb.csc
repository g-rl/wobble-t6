// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_ambientpackage;
#include clientscripts\mp\_music;
#include clientscripts\mp\_audio;

main()
{
    declareambientroom( "buried_outdoor" );
    setambientroomreverb( "buried_outdoor", "burried_outdoor", 1, 1 );
    setambientroomtone( "buried_outdoor", "amb_buried_outdoor_2d", 4, 4 );
    setambientroomcontext( "buried_outdoor", "ringoff_plr", "outdoor" );
    declareambientroom( "buried_outdoor_undrgd", 1 );
    setambientroomreverb( "buried_outdoor_undrgd", "burried_main_cave", 1, 1 );
    setambientroomtone( "buried_outdoor_undrgd", "amb_wind_courtyard_rm", 0.5, 0.5 );
    setambientroomcontext( "buried_outdoor_undrgd", "ringoff_plr", "indoor" );
    declareambientroom( "buried_warehouse" );
    setambientroomreverb( "buried_warehouse", "burried_large_metal", 1, 1 );
    setambientroomcontext( "buried_warehouse", "ringoff_plr", "outdoor" );
    declareambientroom( "buried_tunnel_sml" );
    setambientroomtone( "buried_tunnel_sml", "amb_tunnel_wind_rm", 0.5, 0.5 );
    setambientroomreverb( "buried_tunnel_sml", "burried_shafts", 1, 1 );
    setambientroomcontext( "buried_tunnel_sml", "ringoff_plr", "indoor" );
    declareambientroom( "buried_tunnel_partial" );
    setambientroomtone( "buried_tunnel_partial", "amb_tunnel_wind_rm", 1, 1 );
    setambientroomreverb( "buried_tunnel_partial", "burried_shafts", 1, 1 );
    setambientroomcontext( "buried_tunnel_partial", "ringoff_plr", "outdoor" );
    declareambientroom( "buried_undrgd_wood_med_rm" );
    setambientroomtone( "buried_undrgd_wood_med_rm", "amb_tunnel_wind_rm", 1, 1 );
    setambientroomreverb( "buried_undrgd_wood_med_rm", "burried_medium_wood", 1, 1 );
    setambientroomcontext( "buried_undrgd_wood_med_rm", "ringoff_plr", "indoor" );
    declareambientroom( "buried_courthouse_room_med" );
    setambientroomreverb( "buried_courthouse_room_med", "burried_medium_wood", 1, 1 );
    setambientroomcontext( "buried_courthouse_room_med", "ringoff_plr", "indoor" );
    declareambientroom( "buried_courthouse_close" );
    setambientroomreverb( "buried_courthouse_close", "burried_open_hallway", 1, 1 );
    setambientroomcontext( "buried_courthouse_close", "ringoff_plr", "indoor" );
    declareambientroom( "buried_courthouse_sml_rm" );
    setambientroomreverb( "buried_courthouse_sml_rm", "burried_smallroom", 1, 1 );
    setambientroomcontext( "buried_courthouse_sml_rm", "ringoff_plr", "indoor" );
    declareambientroom( "buried_streets" );
    setambientroomtone( "buried_streets", "amb_wind_courtyard_rm", 1, 1 );
    setambientroomreverb( "buried_streets", "burried_main_cave", 1, 1 );
    setambientroomcontext( "buried_streets", "ringoff_plr", "indoor" );
    declareambientroom( "buried_courtyard" );
    setambientroomtone( "buried_courtyard", "amb_wind_courtyard_rm", 1, 1 );
    setambientroomreverb( "buried_courtyard", "burried_main_cave", 1, 1 );
    setambientroomcontext( "buried_courtyard", "ringoff_plr", "indoor" );
    declareambientroom( "buried_oil_rig_partial" );
    setambientroomreverb( "buried_oil_rig_partial", "burried_main_cave", 1, 1 );
    setambientroomcontext( "buried_oil_rig_partial", "ringoff_plr", "outdoor" );
    declareambientroom( "buried_church_sml_rm" );
    setambientroomreverb( "buried_church_sml_rm", "burried_smallroom", 1, 1 );
    setambientroomcontext( "buried_church_sml_rm", "ringoff_plr", "indoor" );
    declareambientroom( "buried_church_stairs" );
    setambientroomreverb( "buried_church_stairs", "burried_open_hallway", 1, 1 );
    setambientroomcontext( "buried_church_stairs", "ringoff_plr", "indoor" );
    declareambientroom( "buried_church_main" );
    setambientroomreverb( "buried_church_main", "burried_medium_wood", 1, 1 );
    setambientroomcontext( "buried_church_main", "ringoff_plr", "indoor" );
    declareambientroom( "buried_mansion_main" );
    setambientroomreverb( "buried_mansion_main", "burried_medium_wood", 1, 1 );
    setambientroomcontext( "buried_mansion_main", "ringoff_plr", "indoor" );
    declareambientroom( "buried_mansion_balcony" );
    setambientroomreverb( "buried_mansion_balcony", "burried_main_cave", 1, 1 );
    setambientroomcontext( "buried_mansion_balcony", "ringoff_plr", "indoor" );
    declareambientroom( "buried_mansion_stone_rm" );
    setambientroomreverb( "buried_mansion_stone_rm", "burried_stoneroom", 1, 1 );
    setambientroomcontext( "buried_mansion_stone_rm", "ringoff_plr", "indoor" );
    declareambientroom( "buried_mansion_wood_rm" );
    setambientroomreverb( "buried_mansion_wood_rm", "burried_smallroom", 1, 1 );
    setambientroomcontext( "buried_mansion_wood_rm", "ringoff_plr", "indoor" );
    declareambientroom( "buried_mansion_walls" );
    setambientroomreverb( "buried_mansion_walls", "burried_tight_hallway", 1, 1 );
    setambientroomcontext( "buried_mansion_walls", "ringoff_plr", "indoor" );
    declareambientroom( "buried_mansion_halls" );
    setambientroomreverb( "buried_mansion_halls", "burried_open_hallway", 1, 1 );
    setambientroomcontext( "buried_mansion_halls", "ringoff_plr", "indoor" );
    declareambientroom( "buried_mansion_tunnels" );
    setambientroomreverb( "buried_mansion_tunnels", "burried_shafts", 1, 1 );
    setambientroomcontext( "buried_mansion_tunnels", "ringoff_plr", "indoor" );
    declareambientroom( "buried_mansion_stairs" );
    setambientroomreverb( "buried_mansion_stairs", "burried_open_hallway", 1, 1 );
    setambientroomcontext( "buried_mansion_stairs", "ringoff_plr", "indoor" );
    declareambientroom( "buried_maze" );
    setambientroomreverb( "buried_maze", "burried_main_cave", 1, 1 );
    setambientroomcontext( "buried_maze", "ringoff_plr", "indoor" );
    declareambientroom( "buried_spiral_staircase" );
    setambientroomreverb( "buried_spiral_staircase", "burried_main_cave", 1, 1 );
    setambientroomcontext( "buried_spiral_staircase", "ringoff_plr", "indoor" );
    declareambientroom( "buried_wood_rm_sml" );
    setambientroomtone( "buried_wood_rm_sml", "amb_wind_alley_rm", 0.5, 0.5 );
    setambientroomreverb( "buried_wood_rm_sml", "burried_smallroom", 1, 1 );
    setambientroomcontext( "buried_wood_rm_sml", "ringoff_plr", "indoor" );
    declareambientroom( "buried_wood_rm_med" );
    setambientroomtone( "buried_wood_rm_med", "amb_wind_alley_rm", 0.5, 0.5 );
    setambientroomreverb( "buried_wood_rm_med", "burried_medium_wood", 1, 1 );
    setambientroomcontext( "buried_wood_rm_med", "ringoff_plr", "indoor" );
    declareambientroom( "buried_wood_rm_lrg" );
    setambientroomtone( "buried_wood_rm_lrg", "amb_wind_alley_rm", 0.5, 0.5 );
    setambientroomreverb( "buried_wood_rm_lrg", "burried_large_wood", 1, 1 );
    setambientroomcontext( "buried_wood_rm_lrg", "ringoff_plr", "indoor" );
    declareambientroom( "buried_wood_stairs" );
    setambientroomtone( "buried_wood_stairs", "amb_wind_alley_rm", 0.5, 0.5 );
    setambientroomreverb( "buried_wood_stairs", "burried_open_hallway", 1, 1 );
    setambientroomcontext( "buried_wood_stairs", "ringoff_plr", "indoor" );
    declaremusicstate( "WAVE" );
    musicaliasloop( "null", 4, 2 );
    declaremusicstate( "LAST_LIFE" );
    musicaliasloop( "mus_event_lastlife", 0.75, 2 );
    declaremusicstate( "EGG" );
    musicalias( "mus_egg", 1 );
    declaremusicstate( "SILENCE" );
    musicalias( "null", 1 );
    init_fxanim_loops();
    init_audio_snapshot_clientfields();
    thread snd_start_autofx_audio();
    thread snd_play_loopers();
    thread sndslidetrigger();
}

init_audio_snapshot_clientfields()
{
    registerclientfield( "world", "mus_noir_snapshot_loop", 12000, 1, "int", ::audio_snapshot_clientfield_callback, 1, 0 );
    registerclientfield( "world", "mus_zmb_egg_snapshot_loop", 12000, 1, "int", ::audio_snapshot_clientfield_callback, 1, 0 );
}

audio_snapshot_clientfield_callback( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval )
        playloopat( fieldname, ( 0, 0, 0 ) );
    else
        stoploopat( fieldname, ( 0, 0, 0 ) );
}

add_fxanim_stop_loop( fieldname, soundname, origin, start_sound_on_register )
{
    if ( !isdefined( start_sound_on_register ) )
        start_sound_on_register = 1;

    s = spawnstruct();
    s.soundname = soundname;
    s.origin = origin;
    level.fxanim_stop_loops[fieldname] = s;

    if ( start_sound_on_register )
        playloopat( s.soundname, s.origin );
}

add_fxanim_start_loop( fieldname, soundname, origin )
{
    s = spawnstruct();
    s.soundname = soundname;
    s.origin = origin;
    level.fxanim_start_loops[fieldname] = s;
}

fxanim_loop_audio( fieldname, val )
{
    if ( isdefined( level.fxanim_stop_loops[fieldname] ) )
    {
        s = level.fxanim_stop_loops[fieldname];

        if ( val )
            stoploopat( s.soundname, s.origin );
        else
            playloopat( s.soundname, s.origin );
    }
    else if ( isdefined( level.fxanim_start_loops[fieldname] ) )
    {
        s = level.fxanim_start_loops[fieldname];

        if ( val )
            playloopat( s.soundname, s.origin );
        else
            stoploopat( s.soundname, s.origin );
    }
}

init_fxanim_loops()
{
    level.fxanim_stop_loops = [];
    level.fxanim_start_loops = [];
    add_fxanim_stop_loop( "cw_fall", "zmb_catwalk_creak", ( -2995, -417, 1608 ) );
    add_fxanim_stop_loop( "bdb", "zmb_floor_mtl_shake", ( -125, -797, 334 ) );
    add_fxanim_stop_loop( "bdc", "zmb_floor_mtl_shake", ( -1021, 468, 410 ) );
    add_fxanim_stop_loop( "bda", "zmb_floor_mtl_shake", ( -3001, -301, 1251 ) );
    add_fxanim_start_loop( "mansion_piano_play", "mus_corpse_flower_rag", ( 1025, -1571, 102 ) );
    add_fxanim_start_loop( "saloon_piano_play", "mus_corpse_flower_rag", ( 3247, 31, 135 ) );
}

sndslidetrigger()
{
    trig = getent( 0, "sndSlide", "targetname" );

    if ( !isdefined( trig ) )
        return;

    while ( true )
    {
        trig waittill( "trigger", who );

        if ( who isplayer() && !is_true( who.issliding ) )
        {
            who.issliding = 1;
            who thread sndslidetriggeraudio( trig );
            who thread sndslidewoodaudio( trig );
        }
    }
}

sndslidetriggeraudio( trig )
{
    self playsound( 0, "zmb_slide_start" );
    ent = spawn( 0, self.origin, "script_origin" );
    ent thread cleanup_on_spectate();
    ent linkto( self );
    ent playloopsound( "zmb_slide_loop", 0.25 );

    while ( self istouching( trig ) )
    {
        wait 0.1;

        if ( !isdefined( self ) )
        {
/#
            println( "*** Sliding player gone into spectate.  Cleanup." );
#/
            ent notify( "player_in_spectate" );
            trig notify( "player_in_spectate" );
            return;
        }

        if ( self islocalplayer() )
        {
            clientnum = self getlocalclientnumber();

            if ( !isdefined( clientnum ) )
            {
/#
                println( "*** Sliding player gone into spectate.  Cleanup." );
#/
                ent notify( "player_in_spectate" );
                trig notify( "player_in_spectate" );
                return;
            }
        }
    }

    self playsound( 0, "zmb_slide_end" );
    self.issliding = 0;
    ent delete();
    wait 1;
    self notify( "sndEndWood" );
}

cleanup_on_spectate()
{
    self endon( "death" );
    self endon( "entityshutdown" );
    self waittill( "player_in_spectate" );
    self delete();
}

sndslidewoodaudio( calling_trig )
{
    self endon( "sndEndWood" );
    self endon( "bled_out" );
    calling_trig endon( "player_in_spectate" );
    trig = getent( 0, "sndWoodStop", "targetname" );
    trig waittill( "trigger", who );

    if ( who == self )
        self playsound( 0, "zmb_slide_woodstop" );
}

snd_play_loopers()
{
    playloopat( "amb_tunnel_openings", ( -3038, -369, 1230 ) );
    playloopat( "amb_tunnel_openings", ( -109, -847, 322 ) );
    playloopat( "amb_tunnel_openings", ( -948, 461, 408 ) );
    playloopat( "zmb_machine_loop", ( -2675, -412, 1470 ) );
    playloopat( "amb_clock_tick", ( 237, 1260, 107 ) );
    playloopat( "amb_grand_clock_tick", ( 2837, 665, 166 ) );
    playloopat( "amb_grand_clock_tick", ( 2474, 290, 162 ) );
    playloopat( "amb_monk_chant", ( 1715, 2444, 204 ) );
    playloopat( "amb_wind_haunted_house", ( 2831, 563, 349 ) );
    playloopat( "amb_hell_hole_wind", ( 6754, 559, -183 ) );
    playloopat( "amb_jewelry_box", ( 632, -719, 102 ) );
    playloopat( "amb_steel_generator", ( -2511, -104, 1303 ) );
    playloopat( "amb_metal_bending_l", ( -2058, 78, 1467 ) );
    playloopat( "amb_metal_bending_r", ( -3418, -120, 1521 ) );
    playloopat( "amb_tunnel_wind_open", ( -610, -1535, 217 ) );
    playloopat( "amb_tunnel_wind_open", ( -1565, -850, 109 ) );
    playloopat( "amb_tunnel_wind_open", ( 91, -1857, 265 ) );
    playloopat( "amb_tunnel_wind_open", ( 472, -1874, 265 ) );
    playloopat( "amb_tunnel_wind_open", ( -237, -273, 19 ) );
    playloopat( "amb_tunnel_wind_open", ( -61, -1108, 16 ) );
    playloopat( "amb_tunnel_wind_open", ( 262, 592, 299 ) );
    playloopat( "amb_tunnel_wind_open", ( 1200, 2121, 147 ) );
    playloopat( "amb_tunnel_wind_open", ( 807, 2508, 635 ) );
    playloopat( "amb_tunnel_wind_open", ( 2632, 1149, 317 ) );
    playloopat( "amb_tunnel_wind_open", ( 2536, -1, 179 ) );
    playloopat( "amb_tunnel_wind_open", ( 2382, 249, 381 ) );
    playloopat( "amb_tunnel_wind_open", ( 1118, -551, 235 ) );
    playloopat( "amb_tunnel_wind_open", ( 2337, 845, 426 ) );
    playloopat( "amb_tunnel_wind_open", ( -1079, 489, 280 ) );
    playloopat( "amb_tunnel_wind_open", ( -727, -336, 260 ) );
    playloopat( "amb_wind_dank_street", ( 127, 782, 370 ) );
    playloopat( "amb_wind_dank_street", ( -106, 292, 567 ) );
    playloopat( "amb_wind_dank_street", ( -781, 428, 537 ) );
    playloopat( "amb_wind_dank_street", ( -71, 411, 546 ) );
    playloopat( "amb_wind_dank_street", ( 1491, 1226, 323 ) );
    playloopat( "amb_wind_dank_street", ( 2197, 479, 596 ) );
    playloopat( "amb_wind_dank_street", ( 6377, 146, 666 ) );
    playloopat( "amb_wind_dank_street", ( 3606, 218, 659 ) );
    playloopat( "amb_wind_courtyard_rm", ( -1282, -303, 225 ) );
    playloopat( "amb_cloth_flap_lrg", ( -2732, -130, 1615 ) );
    playloopat( "amb_metal_rattle", ( -3234, -146, 1427 ) );
    playloopat( "amb_metal_rattle", ( -3245, -449, 1435 ) );
    playloopat( "amb_cloth_flap_sml", ( -2349, 83, 1444 ) );
    playloopat( "amb_cloth_flap_sml", ( -2356, 64, 1382 ) );
    playloopat( "amb_cloth_flap_sml", ( -2602, 98, 1343 ) );
    playloopat( "amb_street_light", ( 1634, 478, 158 ) );
    soundlineemitter( "amb_rift_wind", ( -3310, 102, 1432 ), ( -1931, 107, 1450 ) );
}

snd_start_autofx_audio()
{
    snd_play_auto_fx( "fx_buried_bats_group", "amb_bats", 0, 0, 0, 0 );
    snd_play_auto_fx( "fx_buried_glow_kerosene_lamp", "amb_lantern", 0, 0, 0, 0 );
    snd_play_auto_fx( "fx_buried_glow_sconce", "amb_sconce_light", 0, 0, 0, 0 );
    snd_play_auto_fx( "fx_buried_water_dripping", "amb_water_drip", 0, 0, 0, 1 );
    snd_play_auto_fx( "fx_buried_water_spilling", "amb_water_spill", 0, 0, 0, 1 );
}

sndbackgroundtrack( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( !isdefined( self.sndbackgroundtrack ) )
        self.sndbackgroundtrack = spawn( 0, ( 0, 0, 0 ), "script_origin" );

    if ( newval == oldval )
        return;

    self.sndbackgroundtrack notify( "sndBackgroundChanging" );

    switch ( newval )
    {
        case 0:
            self.sndbackgroundtrack thread sndbackgroundtrackplay( "mus_underscore_null" );
            break;
        case 1:
            self.sndbackgroundtrack thread sndbackgroundtrackplay( "mus_underscore_underground" );
            break;
        case 2:
            self.sndbackgroundtrack thread sndbackgroundtrackplay( "mus_underscore_hauntedhouse" );
            break;
        case 3:
            self.sndbackgroundtrack thread sndbackgroundtrackplay( "mus_underscore_heartbeat" );
            break;
        default:
            self.sndbackgroundtrack thread sndbackgroundtrackplay( "mus_underscore_null" );
            break;
    }
}

sndbackgroundtrackplay( alias )
{
    self endon( "sndBackgroundChanging" );
    self endon( "death" );
    self stoploopsound( 2 );
    wait 2;
    self playloopsound( alias, 2 );
}
