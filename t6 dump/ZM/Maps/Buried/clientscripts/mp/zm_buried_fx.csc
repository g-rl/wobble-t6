// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\zombies\_zm_ai_ghost;
#include clientscripts\mp\createfx\zm_buried_fx;
#include clientscripts\mp\_fx;
#include clientscripts\mp\zm_buried_amb;

precache_util_fx()
{

}

precache_scripted_fx()
{
    level._effect["eye_glow"] = loadfx( "maps/zombie/fx_zombie_eye_single_blue" );
    level._effect["blue_eyes"] = loadfx( "maps/zombie/fx_zombie_eye_single_blue" );
    level._effect["orange_eyes"] = loadfx( "misc/fx_zombie_eye_single" );
    level._effect["sq_vulture_orange_eye_glow"] = loadfx( "misc/fx_zombie_eye_side_quest" );
    level._effect["player_possessed_eyes"] = loadfx( "maps/zombie_buried/fx_buried_eye_stulhinger" );
    gametype = getdvar( #"ui_gametype" );

    if ( gametype == "zcleansed" )
        level._effect["blue_eyes_player"] = loadfx( "maps/zombie/fx_zombie_eye_returned_blue" );

    level._effect["headshot"] = loadfx( "impacts/fx_flesh_hit" );
    level._effect["headshot_nochunks"] = loadfx( "misc/fx_zombie_bloodsplat" );
    level._effect["bloodspurt"] = loadfx( "misc/fx_zombie_bloodspurt" );
    level._effect["animscript_gib_fx"] = loadfx( "weapon/bullet/fx_flesh_gib_fatal_01" );
    level._effect["animscript_gibtrail_fx"] = loadfx( "trail/fx_trail_blood_streak" );

    if ( isdefined( 0 ) && 0 )
    {
        level._effect["player_3rd_spotlight_lite"] = loadfx( "maps/zombie_buried/fx_buried_spot_flkr_lite" );
        level._effect["player_3rd_spotlight_med"] = loadfx( "maps/zombie_buried/fx_buried_spot_flkr_med" );
        level._effect["player_3rd_spotlight_hvy"] = loadfx( "maps/zombie_buried/fx_buried_spot_flkr_hvy" );
    }

    level._effect["crusher_sparks"] = loadfx( "maps/zombie_buried/fx_buried_crusher_sparks" );
    level._effect["rise_burst_foliage"] = loadfx( "maps/zombie/fx_zm_buried_hedge_billow_body" );
    level._effect["rise_billow_foliage"] = loadfx( "maps/zombie/fx_zm_buried_hedge_burst_hand" );
    level._effect["rise_dust_foliage"] = loadfx( "maps/zombie/fx_zm_buried_hedge_dustfall_body" );
    level._effect["fx_buried_key_glint"] = loadfx( "maps/zombie_buried/fx_buried_key_glint" );

    if ( level.scr_zm_ui_gametype == "zclassic" )
    {
        level._effect["sq_bulb_blue"] = loadfx( "maps/zombie_buried/fx_buried_eg_blu" );
        level._effect["sq_bulb_orange"] = loadfx( "maps/zombie_buried/fx_buried_eg_orng" );
        level._effect["sq_bulb_yellow"] = loadfx( "maps/zombie_buried/fx_buried_sq_bulb_yellow" );
        level._effect["sq_bulb_green"] = loadfx( "maps/zombie_buried/fx_buried_sq_bulb_green" );
        level thread clientscripts\mp\zombies\_zm_ai_ghost::precache_fx();
    }

    level._fxanim_exploders = [];
    level._fxanim_exploders["sloth_fountain_start"] = 600;
}

precache_createfx_fx()
{
    level._effect["fx_buried_ash_blowing"] = loadfx( "maps/zombie_buried/fx_buried_ash_blowing" );
    level._effect["fx_buried_bats_group"] = loadfx( "maps/zombie_buried/fx_buried_bats_group" );
    level._effect["fx_buried_cloud_low"] = loadfx( "maps/zombie_buried/fx_buried_cloud_low" );
    level._effect["fx_buried_conveyor_belt_edge"] = loadfx( "maps/zombie_buried/fx_buried_conveyor_belt_edge" );
    level._effect["fx_buried_dust_ceiling_hole"] = loadfx( "maps/zombie_buried/fx_buried_dust_ceiling_hole" );
    level._effect["fx_buried_dust_edge_100"] = loadfx( "maps/zombie_buried/fx_buried_dust_edge_100" );
    level._effect["fx_buried_dust_edge_xlg"] = loadfx( "maps/zombie_buried/fx_buried_dust_edge_xlg" );
    level._effect["fx_buried_dust_edge_blown"] = loadfx( "maps/zombie_buried/fx_buried_dust_edge_blown" );
    level._effect["fx_buried_dust_flurry"] = loadfx( "maps/zombie_buried/fx_buried_dust_flurry" );
    level._effect["fx_buried_dust_int_25x50"] = loadfx( "maps/zombie_buried/fx_buried_dust_int_25x50" );
    level._effect["fx_buried_dust_motes_xlg"] = loadfx( "maps/zombie_buried/fx_buried_dust_motes_xlg" );
    level._effect["fx_buried_dust_motes_ext_xlg"] = loadfx( "maps/zombie_buried/fx_buried_dust_motes_ext_xlg" );
    level._effect["fx_buried_dust_motes_ext_sm"] = loadfx( "maps/zombie_buried/fx_buried_dust_motes_ext_sm" );
    level._effect["fx_buried_dust_rising_sm"] = loadfx( "maps/zombie_buried/fx_buried_dust_rising_sm" );
    level._effect["fx_buried_dust_rising_md"] = loadfx( "maps/zombie_buried/fx_buried_dust_rising_md" );
    level._effect["fx_buried_dust_tunnel_ceiling"] = loadfx( "maps/zombie_buried/fx_buried_dust_tunnel_ceiling" );
    level._effect["fx_buried_fireplace"] = loadfx( "maps/zombie_buried/fx_buried_fireplace" );
    level._effect["fx_buried_fog_sm"] = loadfx( "maps/zombie_buried/fx_buried_fog_sm" );
    level._effect["fx_buried_fog_md"] = loadfx( "maps/zombie_buried/fx_buried_fog_md" );
    level._effect["fx_buried_glow_kerosene_lamp"] = loadfx( "maps/zombie_buried/fx_buried_glow_kerosene_lamp" );
    level._effect["fx_buried_glow_sconce"] = loadfx( "maps/zombie_buried/fx_buried_glow_sconce" );
    level._effect["fx_buried_god_ray_sm"] = loadfx( "maps/zombie_buried/fx_buried_god_ray_sm" );
    level._effect["fx_buried_godray_church"] = loadfx( "maps/zombie_buried/fx_buried_godray_church" );
    level._effect["fx_buried_godray_ext_sm"] = loadfx( "maps/zombie_buried/fx_buried_godray_ext_sm" );
    level._effect["fx_buried_godray_ext_md"] = loadfx( "maps/zombie_buried/fx_buried_godray_ext_md" );
    level._effect["fx_buried_godray_ext_lg"] = loadfx( "maps/zombie_buried/fx_buried_godray_ext_lg" );
    level._effect["fx_buried_godray_ext_thin"] = loadfx( "maps/zombie_buried/fx_buried_godray_ext_thin" );
    level._effect["fx_buried_insects"] = loadfx( "maps/zombie_buried/fx_buried_insects" );
    level._effect["fx_buried_sand_windy_sm"] = loadfx( "maps/zombie_buried/fx_buried_sand_windy_sm" );
    level._effect["fx_buried_sand_windy_md"] = loadfx( "maps/zombie_buried/fx_buried_sand_windy_md" );
    level._effect["fx_buried_sandstorm_edge"] = loadfx( "maps/zombie_buried/fx_buried_sandstorm_edge" );
    level._effect["fx_buried_sandstorm_distant"] = loadfx( "maps/zombie_buried/fx_buried_sandstorm_distant" );
    level._effect["fx_buried_smk_plume_lg"] = loadfx( "maps/zombie_buried/fx_buried_smk_plume_lg" );
    level._effect["fx_buried_steam_md"] = loadfx( "maps/zombie_buried/fx_buried_steam_md" );
    level._effect["fx_buried_water_dripping"] = loadfx( "maps/zombie_buried/fx_buried_water_dripping" );
    level._effect["fx_buried_water_spilling"] = loadfx( "maps/zombie_buried/fx_buried_water_spilling" );
    level._effect["fx_buried_water_spilling_lg"] = loadfx( "maps/zombie_buried/fx_buried_water_spilling_lg" );
    level._effect["fx_buried_barrier_break"] = loadfx( "maps/zombie_buried/fx_buried_barrier_break" );
    level._effect["fx_buried_barrier_break_sm"] = loadfx( "maps/zombie_buried/fx_buried_barrier_break_sm" );
    level._effect["fx_buried_dest_floor_lg"] = loadfx( "maps/zombie_buried/fx_buried_dest_floor_lg" );
    level._effect["fx_buried_dest_floor_sm"] = loadfx( "maps/zombie_buried/fx_buried_dest_floor_sm" );
    level._effect["fx_buried_dest_platform_lsat"] = loadfx( "maps/zombie_buried/fx_buried_dest_platform_lsat" );
    level._effect["fx_buried_fountain_spray"] = loadfx( "maps/zombie_buried/fx_buried_fountain_spray" );
    level._effect["fx_buried_fountain_swirl"] = loadfx( "maps/zombie_buried/fx_buried_fountain_swirl" );
    level._effect["fx_buried_meteor_sm_runner"] = loadfx( "maps/zombie_buried/fx_buried_meteor_sm_runner" );
    level._effect["fx_buried_meteor_lg_runner"] = loadfx( "maps/zombie_buried/fx_buried_meteor_lg_runner" );
}

#using_animtree("fxanim_props_dlc3");

precache_fxanim_props()
{
    level.scr_anim["fxanim_props"]["sheriff_sign"] = %fxanim_zom_buried_sign_sheriff_anim;
    level.scr_anim["fxanim_props"]["balcony_rope"] = %fxanim_zom_buried_rope_balcony_anim;
    level.scr_anim["fxanim_props"]["livingstone_sign"] = %fxanim_zom_buried_sign_livingstone_anim;
    level.scr_anim["fxanim_props"]["livingstone_sign_fast"] = %fxanim_zom_buried_sign_livingstone_fast_anim;
    level.scr_anim["fxanim_props"]["noose_lrg"] = %fxanim_zom_buried_noose_lrg_anim;
    level.scr_anim["fxanim_props"]["noose_med"] = %fxanim_zom_buried_noose_med_anim;
    level.scr_anim["fxanim_props"]["noose_sml"] = %fxanim_zom_buried_noose_sml_anim;
    level.scr_anim["fxanim_props"]["rope_barn"] = %fxanim_zom_buried_rope_barn_anim;
    level.scr_anim["fxanim_props"]["lsat_catwalk"] = %fxanim_zom_buried_catwalk_anim;
    level.scr_anim["fxanim_props"]["sq_orbs"] = %fxanim_zom_buried_orbs_anim;
    level.scr_anim["fxanim_props"]["endgame_machine_open"] = %o_zombie_end_game_open;
    level.scr_anim["fxanim_props"]["endgame_machine_close"] = %o_zombie_end_game_close;
    level.scr_anim["fxanim_props"]["gunsmith_sign"] = %fxanim_zom_buried_sign_gunsmith_anim;
    level.scr_anim["fxanim_props"]["corrugated_panels"] = %fxanim_zom_buried_corrugated_panels_anim;
    level.scr_anim["fxanim_props"]["clock_old"] = %fxanim_gp_clock_old_anim;
    level.scr_anim["fxanim_props"]["chandelier"] = %fxanim_gp_chandelier_anim;
    level.scr_anim["fxanim_props"]["track_board"] = %fxanim_zom_buried_track_board_anim;
    level.scr_anim["fxanim_props"]["wood_plank_hole"] = %fxanim_zom_buried_wood_plank_hole_anim;
    level.scr_anim["fxanim_props"]["wood_plank_bridge"] = %fxanim_zom_buried_wood_plank_bridge_anim;
    level.scr_anim["fxanim_props"]["drop_start"] = %fxanim_zom_buried_board_drop_start_anim;
    level.scr_anim["fxanim_props"]["rock_crusher"] = %fxanim_zom_buried_rock_crusher_anim;
    level.scr_anim["fxanim_props"]["rock_crusher_btm"] = %fxanim_zom_buried_rock_crusher_btm_anim;
    level.scr_anim["fxanim_props"]["piano_old"] = %fxanim_gp_piano_old_anim;
    level.scr_anim["fxanim_props"]["general_store_sign"] = %fxanim_zom_buried_sign_general_store_anim;
    level.scr_anim["fxanim_props"]["tree_vines"] = %fxanim_zom_buried_tree_vines_anim;
    level.scr_anim["fxanim_props"]["ice_cream_sign"] = %fxanim_zom_buried_sign_ice_cream_anim;
    level.scr_anim["fxanim_props"]["conveyor"] = %fxanim_zom_buried_conveyor_anim;
    level.scr_anim["fxanim_props"]["conveyor_lrg"] = %fxanim_zom_buried_conveyor_lrg_anim;
    level.scr_anim["fxanim_props"]["fountain_grave"] = %fxanim_zom_buried_fountain_grave_anim;
    level.scr_anim["fxanim_props"]["fountain_maze"] = %fxanim_zom_buried_fountain_maze_anim;
    level.scr_anim["fxanim_props"]["rocks_church"] = %fxanim_zom_buried_falling_rocks_church_anim;
    level.scr_anim["fxanim_props"]["rocks_graveyard"] = %fxanim_zom_buried_falling_rocks_graveyard_anim;
    level.scr_anim["fxanim_props"]["rocks_mansion"] = %fxanim_zom_buried_falling_rocks_mansion_anim;
    level.scr_anim["fxanim_props"]["switch_up"] = %o_zombie_maze_switch_up;
    level.scr_anim["fxanim_props"]["switch_down"] = %o_zombie_maze_switch_down;
    level.scr_anim["fxanim_props"]["switch_neutral"] = %o_zombie_maze_switch_neutral;
    level.scr_anim["fxanim_props"]["bank_sign"] = %fxanim_zom_buried_sign_bank_anim;
    scriptmodelsuseanimtree( #animtree );
}

main()
{
    clientscripts\mp\createfx\zm_buried_fx::main();
    clientscripts\mp\_fx::reportnumeffects();
    precache_util_fx();
    precache_createfx_fx();
    disablefx = getdvarint( #"disable_fx" );

    if ( !isdefined( disablefx ) || disablefx <= 0 )
        precache_scripted_fx();
}

setup_prop_anims()
{
    level.fxanim_notifies_to_become_clientfields = array( "sloth_fountain_start", "maze_fountain_start", "bda", "bdb", "bdc", "cw_fall", "mansion_piano_play", "saloon_piano_play" );

    if ( getdvar( #"createfx" ) == "" )
    {
        foreach ( key in level.fxanim_notifies_to_become_clientfields )
        {
            registerclientfield( "world", key, 12000, 1, "int", ::fxanim_clientfield_callback, 0, 0 );
/#
            println( "Registering fxanim worldfield for " + key );
#/
        }
    }

    level._fxanim_clientfield_props = [];
    waitforclient( 0 );
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
        level thread play_fx_prop_anims( i );
}

play_fx_prop_anims( localclientnum )
{
    whitelist = array( "fxanim_zom_buried_catwalk_mod", "fxanim_zom_buried_fountain_mod", "fxanim_gp_piano_old_mod", "fxanim_zom_buried_wood_planks_mod", "fxanim_zom_board_drop_start_mod", "fxanim_zom_buried_board_drop_start_mod", "fxanim_zom_buried_fountain_mod", "p6_zm_bu_pipe_busted_b", "p6_zm_bu_pipe_64a", "fxanim_zom_buried_sign_general_store_mod", "fxanim_zom_buried_sign_sheriff_mod" );

    while ( !clienthassnapshot( localclientnum ) )
        wait 0.05;

    fxanim_prop_candidates = getentarray( localclientnum, "fxanim_dlc3", "targetname" );

    if ( getlocalplayers().size > 2 )
    {
        ss_fxanim_props = [];

        foreach ( prop in fxanim_prop_candidates )
        {
            if ( !isinarray( whitelist, prop.model ) )
            {
/#
                event = "none";

                if ( isdefined( prop.fxanim_waittill_1 ) )
                    event = prop.fxanim_waittill_1;

                println( "WHITELIST : " + prop.model + " not contained in whitelist, event [" + event + "] - removed for lcn " + localclientnum );
#/
                prop delete();
                continue;
            }

            ss_fxanim_props[ss_fxanim_props.size] = prop;
        }

        fxanim_prop_candidates = ss_fxanim_props;
    }

    fxanim_props = [];

    foreach ( prop in fxanim_prop_candidates )
    {
        if ( isdefined( prop.fxanim_waittill_1 ) )
        {
            if ( !isinarray( level.fxanim_notifies_to_become_clientfields, prop.fxanim_waittill_1 ) )
                fxanim_props[fxanim_props.size] = prop;
            else
            {
                if ( !isdefined( level._fxanim_clientfield_props[prop.fxanim_waittill_1] ) )
                    level._fxanim_clientfield_props[prop.fxanim_waittill_1] = [];

                if ( !isdefined( level._fxanim_clientfield_props[prop.fxanim_waittill_1][localclientnum] ) )
                    level._fxanim_clientfield_props[prop.fxanim_waittill_1][localclientnum] = [];

                level._fxanim_clientfield_props[prop.fxanim_waittill_1][localclientnum][level._fxanim_clientfield_props[prop.fxanim_waittill_1][localclientnum].size] = prop;
            }

            continue;
        }

        fxanim_props[fxanim_props.size] = prop;
    }

    array_thread( fxanim_props, ::fxanim_props_think, localclientnum );
}

fxanim_props_think( localclientnum )
{
    self endon( "death" );
    self endon( "entityshutdown" );
    self endon( "delete" );
    wait 3;

    if ( isdefined( self.fxanim_waittill_1 ) )
    {
        if ( issubstr( self.fxanim_waittill_1, "rocks_fall" ) )
        {
            self randomized_fxanim_init( self.fxanim_waittill_1 );
            return;
        }

        level waittill( self.fxanim_waittill_1 );
    }

    if ( isdefined( self.fxanim_wait ) )
        wait( self.fxanim_wait );

    if ( !isdefined( self.fxanim_scene_1 ) )
    {
        self delete();
        return;
    }

    self useanimtree( #animtree );

    if ( isdefined( level.scr_anim["fxanim_props"][self.fxanim_scene_1] ) )
    {
        self setflaggedanim( "buried_fxanim", level.scr_anim["fxanim_props"][self.fxanim_scene_1], 1.0, 0.0, 1.0 );

        if ( self.fxanim_scene_1 == "rock_crusher" )
            self thread fxanim_fx_init( localclientnum );
    }
}

fxanim_fx_init( localclientnum )
{
    while ( true )
    {
        self waittill( "buried_fxanim", note );

        if ( note == "bar_01_spark" )
            playfxontag( localclientnum, level._effect["crusher_sparks"], self, "bar_01_fx_jnt" );

        if ( note == "pivot_a_spark" )
            playfxontag( localclientnum, level._effect["crusher_sparks"], self, "pivot_a_fx_jnt" );
    }
}

randomized_fxanim_init( notice )
{
    if ( !isdefined( self.fxanim_scene_1 ) )
    {
        self delete();
        return;
    }

    self useanimtree( #animtree );

    while ( true )
    {
        wait( randomfloatrange( 30, 60 ) );

        if ( isdefined( level.scr_anim["fxanim_props"][self.fxanim_scene_1] ) )
            self setflaggedanim( "buried_fxanim", level.scr_anim["fxanim_props"][self.fxanim_scene_1], 1.0, 0.0, 1.0 );
    }
}

fxanim_clientfield_callback( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    while ( !isdefined( level._fxanim_clientfield_props ) || !isdefined( level._fxanim_clientfield_props[fieldname] ) )
        wait 0.05;

    ents = level._fxanim_clientfield_props[fieldname][localclientnum];

    if ( !isdefined( ents ) )
    {
/#
        println( " *** fxanim_clientfield_callback : Callback for field : " + fieldname + " but no entities associated. ***" );
#/
        return;
    }

    if ( binitialsnap || bwasdemojump || bnewent )
    {
        timeval = 1.0;

        if ( !newval )
            timeval = 0.0;

        foreach ( ent in ents )
        {
            if ( !isdefined( ent.has_anim_tree ) )
            {
                ent useanimtree( #animtree );
                ent.has_anim_tree = 1;
            }

            if ( isdefined( level.scr_anim["fxanim_props"][ent.fxanim_scene_1] ) )
            {
                ent setflaggedanimrestart( "buried_fxanim", level.scr_anim["fxanim_props"][ent.fxanim_scene_1], 1.0, 0.0, 0.0 );
                ent setanimtime( level.scr_anim["fxanim_props"][ent.fxanim_scene_1], timeval );
            }

            if ( localclientnum == 0 )
            {
                val = 0;

                if ( newval )
                    val = 1;

                clientscripts\mp\zm_buried_amb::fxanim_loop_audio( fieldname, val );
                handle_fxanim_exploders( fieldname, val );
            }
        }
    }
    else if ( newval )
    {
        if ( isdefined( ents[0].fxanim_wait ) )
            wait( ents[0].fxanim_wait );

        foreach ( ent in ents )
        {
            if ( isdefined( ent ) )
            {
                if ( !isdefined( ent.has_anim_tree ) )
                {
                    ent useanimtree( #animtree );
                    ent.has_anim_tree = 1;
                }

                if ( isdefined( ent.fxanim_scene_1 ) )
                    ent setflaggedanim( "buried_fxanim", level.scr_anim["fxanim_props"][ent.fxanim_scene_1], 1.0, 0.0, 1.0 );
            }

            if ( localclientnum == 0 )
            {
                clientscripts\mp\zm_buried_amb::fxanim_loop_audio( fieldname, 1 );
                handle_fxanim_exploders( fieldname, 1 );
            }
        }
    }
    else if ( localclientnum == 0 )
    {
        clientscripts\mp\zm_buried_amb::fxanim_loop_audio( fieldname, 0 );
        handle_fxanim_exploders( fieldname, val );

        foreach ( ent in ents )
        {
            if ( isdefined( ent ) && isdefined( ent.fxanim_scene_1 ) && isdefined( level.scr_anim["fxanim_props"][ent.fxanim_scene_1] ) )
                ent clearanim( level.scr_anim["fxanim_props"][ent.fxanim_scene_1], 0 );
        }
    }
}

handle_fxanim_exploders( fieldname, val )
{
    if ( !isdefined( level._fxanim_exploders[fieldname] ) )
        return;

    if ( val )
        clientscripts\mp\_fx::activate_exploder( level._fxanim_exploders[fieldname] );
    else
        clientscripts\mp\_fx::deactivate_exploder( level._fxanim_exploders[fieldname] );
}
