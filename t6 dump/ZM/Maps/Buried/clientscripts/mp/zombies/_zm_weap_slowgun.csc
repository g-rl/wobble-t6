// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_fx;
#include clientscripts\mp\zombies\_zm;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\zombies\_zm_audio;

init()
{
    if ( getdvar( #"createfx" ) == "on" )
        return;

    if ( !clientscripts\mp\zombies\_zm_weapons::is_weapon_included( "slowgun_zm" ) )
        return;

    registerclientfield( "actor", "slowgun_fx", 12000, 3, "int", ::slowgun_actor_fx, 0 );
    registerclientfield( "actor", "anim_rate", 7000, 5, "float", clientscripts\mp\zombies\_zm_audio::sndsetzombiecontext, 0 );
    registerclientfield( "allplayers", "anim_rate", 7000, 5, "float", undefined, 0 );
    registerclientfield( "toplayer", "sndParalyzerLoop", 12000, 1, "int", ::sndparalyzerloop );
    registerclientfield( "toplayer", "slowgun_fx", 12000, 1, "int", ::slowgun_player_fx, 0 );
    setupclientfieldanimspeedcallbacks( "actor", 1, "anim_rate" );
    setupclientfieldanimspeedcallbacks( "allplayers", 1, "anim_rate" );
    level._effect["zombie_slowgun_explosion"] = loadfx( "weapon/paralyzer/fx_paralyzer_body_disintegrate" );
    level._effect["zombie_slowgun_explosion_ug"] = loadfx( "weapon/paralyzer/fx_paralyzer_body_disintegrate_ug" );
    level._effect["zombie_slowgun_sizzle"] = loadfx( "weapon/paralyzer/fx_paralyzer_hit_dmg" );
    level._effect["zombie_slowgun_sizzle_ug"] = loadfx( "weapon/paralyzer/fx_paralyzer_hit_dmg_ug" );
    level._effect["player_slowgun_sizzle_1st"] = loadfx( "weapon/paralyzer/fx_paralyzer_hit_noharm_view" );
/#
    level thread show_anim_rates();
#/
}

slowgun_dial_sounds( localclientnum )
{
    self notify( "stop_slowgun_dial_sounds" );
    self endon( "stop_slowgun_dial_sounds" );
    self endon( "disconnect" );
    self endon( "entityshutdown" );
    self.slowgun_digit1 = 0;

    while ( true )
    {
        overheating = isweaponoverheating( localclientnum, 0 );
        heat = isweaponoverheating( localclientnum, 1 );
        digit1 = int( heat ) % 10;

        if ( self.slowgun_digit1 != digit1 )
            self playsound( localclientnum, "wpn_paralyzer_counter_tick" );

        self.slowgun_digit1 = digit1;
        wait 0.05;
    }
}

sndparalyzerloop( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval == 1 )
    {
        if ( !isdefined( self.sndparalyzerloopent ) )
            self.sndparalyzerloopent = spawn( 0, self.origin, "script_origin" );

        self.sndparalyzerloopent playloopsound( "fly_paralyzer_loop", 1 );
        self thread slowgun_dial_sounds( localclientnum );
    }
    else
    {
        if ( isdefined( self.sndparalyzerloopent ) )
        {
            self.sndparalyzerloopent delete();
            self.sndparalyzerloopent = undefined;
        }

        self notify( "stop_slowgun_dial_sounds" );
    }
}

slowgun_player_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval )
        self thread play_sizzle_player( localclientnum );
    else
        self notify( "end_sizzle" );
}

play_sizzle_player( localclientnum, upgraded )
{
    self notify( "end_sizzle" );
    self endon( "end_sizzle" );
    followed = playerbeingspectated( localclientnum );

    while ( isdefined( self ) && followed == playerbeingspectated( localclientnum ) )
    {
        sizzle = "player_slowgun_sizzle_1st";

        if ( isdefined( level._effect[sizzle] ) )
            playviewmodelfx( localclientnum, level._effect[sizzle], "tag_camera" );

        wait 0.1;
    }
}

slowgun_actor_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    upgraded = ( newval & 4 ) != 0;

    if ( newval & 2 )
    {
        self notify( "end_sizzle" );
        tag1 = "J_Head";
        tag2 = "J_SpineLower";
        tag3 = "J_Elbow_LE";
        tag4 = "J_Elbow_RI";

        if ( is_true( self.isdog ) )
        {
            tag1 = "tag_origin";
            tag2 = "tag_origin";
            tag3 = "tag_origin";
            tag4 = "tag_origin";
        }

        self playsound( localclientnum, "wpn_paralyzer_dsintegrate" );
        effect = "zombie_slowgun_explosion";

        if ( upgraded )
            effect = "zombie_slowgun_explosion_ug";

        if ( isdefined( level._effect[effect] ) )
        {
            angles = self.angles;
            forward = anglestoforward( angles );
            right = anglestoforward( angles );
            which = randomint( 3 );
            playfx( localclientnum, level._effect[effect], self gettagorigin( tag2 ), -1 * forward );

            switch ( which )
            {
                case 0:
                    playfx( localclientnum, level._effect[effect], self gettagorigin( tag1 ), forward );
                    break;
                case 1:
                    back_and_to_the_left = -0.5 * ( forward + right );
                    playfx( localclientnum, level._effect[effect], self gettagorigin( tag3 ), back_and_to_the_left );
                    break;
                default:
                    playfx( localclientnum, level._effect[effect], self gettagorigin( tag4 ), right );
                    break;
            }
        }

        if ( !is_true( self.isdog ) )
            wait 0.1;
    }
    else if ( newval & 1 )
        self thread play_sizzle( localclientnum, upgraded );
    else
        self notify( "end_sizzle" );
}

pick_slowgun_sizzle_bone()
{
    bone = "";
    which = randomint( 3 );

    switch ( which )
    {
        case 0:
            bone = "J_SpineLower";
            break;
        case 1:
            bone = "J_SpineUpper";
            break;
        default:
            bone = "J_Spine4";
            break;
    }

    self.slowgun_sizzle_bone = bone;
}

play_sizzle( localclientnum, upgraded )
{
    self notify( "end_sizzle" );
    self endon( "end_sizzle" );

    while ( isdefined( self ) )
    {
        sizzle = "zombie_slowgun_sizzle";

        if ( upgraded )
            sizzle = "zombie_slowgun_sizzle_ug";

        if ( !isdefined( self.slowgun_sizzle_bone ) || randomint( 4 ) == 0 )
            self pick_slowgun_sizzle_bone();

        if ( isdefined( level._effect[sizzle] ) )
            playfxontag( localclientnum, level._effect[sizzle], self, self.slowgun_sizzle_bone );

        wait 0.1;
    }
}

show_anim_rate( pos, dsquared )
{
/#
    if ( distancesquared( pos, self.origin ) > dsquared )
        return;

    rate = self getentityanimrate();
    color = ( 1 - rate, rate, 0 );
    text = "" + int( rate * 100 ) + " C";
    print3d( self.origin + vectorscale( ( 0, 0, 1 ), 15.0 ), text, color, 1, 0.5, 2 );
#/
}

show_anim_rates()
{
/#
    while ( true )
    {
        if ( getdvarint( #"_id_61A711C2" ) == 3 )
        {
            lp = getlocalplayers()[0];
            ents = getentarray( 0 );

            foreach ( ent in ents )
            {
                if ( isdefined( ent ) && ( ent isplayer() || isdefined( ent._eyearray ) && isdefined( ent._eyearray[0] ) ) && ent isalive() )
                    ent show_anim_rate( lp.origin, 360000 );
            }
        }

        wait 0.05;
    }
#/
}
