// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_fx;
#include clientscripts\mp\zombies\_zm_equipment;

init()
{
    clientscripts\mp\zombies\_zm_equipment::add_equip_activated_callback_override( "t6_wpn_zmb_subwoofer", ::subwoofer_activated_cb );
    level._effect["subwoofer_on"] = loadfx( "maps/zombie_highrise/fx_highrise_trmpl_steam_os" );
    level._effect["subwoofer_audio_wave"] = loadfx( "maps/zombie_buried/fx_buried_subwoofer_blast" );
    level._effect["subwoofer_knockdown_ground"] = loadfx( "weapon/thunder_gun/fx_thundergun_knockback_ground" );
    level._effect["subwoofer_disappear"] = loadfx( "maps/zombie/fx_zmb_tranzit_turbine_explo" );
    registerclientfield( "actor", "subwoofer_flings_zombie", 12000, 1, "int", ::subwoofer_flings_zombie_cb, 0, 0 );
    level._active_subwoofers = [];
}

get_closest_sub( pos )
{
    closest = 10000000;
    ret_sub = undefined;
    keys = getarraykeys( level._active_subwoofers );
    orphan_found = 0;

    for ( i = 0; i < keys.size; i++ )
    {
        sub = level._active_subwoofers[keys[i]];

        if ( !isdefined( sub ) )
        {
            orphan_found = 1;
            continue;
        }

        distsq = distancesquared( sub.origin, pos );

        if ( distsq < closest )
        {
            ret_sub = sub;
            closest = distsq;
        }
    }

    if ( orphan_found )
    {
        new_list = [];

        for ( i = 0; i < keys.size; i++ )
        {
            if ( isdefined( level._active_subwoofers[keys[i]] ) )
                new_list[keys[i]] = level._active_subwoofers[keys[i]];
        }

        level._active_subwoofers = new_list;
    }

    return ret_sub;
}

subwoofer_flings_zombie_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval )
        self thread subwoofer_fling_zombie( localclientnum );
}

subwoofer_fling_zombie( localclientnum )
{
    wait 0.016;

    if ( !isdefined( self ) )
        return;

    sub = get_closest_sub( self.origin );

    if ( isdefined( sub ) )
    {
        flat_angle = ( 0, sub.angles[1], 0 );
        direction_forward = anglestoforward( flat_angle + vectorscale( ( -1, 0, 0 ), 30.0 ) );
        direction_vector = vectorscale( direction_forward, 512 );
        self launchragdoll( direction_vector / 4 );
    }
}

subwoofer_activated_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval )
    {
        level._active_subwoofers["" + self getentitynumber()] = self;
        players = getlocalplayers();

        for ( i = 0; i < players.size; i++ )
        {
            players[i] earthquake( 0.2, 1.8, self.origin, 256 );
            physicsexplosioncylinder( i, self.origin, 600, 240, 1 );
        }

        self playsound( 0, "zmb_subwoofer_layer1" );
        flat_angle = ( 0, self.angles[1], 0 );
        self clientscripts\mp\zombies\_zm_equipment::play_fx_for_all_clients( level._effect["subwoofer_audio_wave"], undefined, 0, anglestoforward( flat_angle ) );
        self notify( "subwoofer_activated" );
    }
    else
        self thread subwoofer_delayed_removal_from_active_list();
}

subwoofer_delayed_removal_from_active_list()
{
    self endon( "subwoofer_activated" );
    wait 0.5;

    if ( !isdefined( self ) )
        return;

    level._active_subwoofers["" + self getentitynumber()] = undefined;
}

init_animtree()
{

}
