// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\zombies\_zm_utility;

prepare_chalk_weapon_list()
{
    level.buildable_wallbuy_weapons = [];
    level.buildable_wallbuy_weapons[0] = "ak74u_zm";
    level.buildable_wallbuy_weapons[1] = "an94_zm";
    level.buildable_wallbuy_weapons[2] = "pdw57_zm";
    level.buildable_wallbuy_weapons[3] = "svu_zm";
    level.buildable_wallbuy_weapons[4] = "tazer_knuckles_zm";
    level.buildable_wallbuy_weapons[5] = "870mcs_zm";
    level.buildable_wallbuy_weapon_models = [];
    level.buildable_wallbuy_weapon_models["ak74u_zm"] = undefined;
    level.buildable_wallbuy_weapon_models["an94_zm"] = undefined;
    level.buildable_wallbuy_weapon_models["pdw57_zm"] = undefined;
    level.buildable_wallbuy_weapon_models["svu_zm"] = undefined;
    level.buildable_wallbuy_weapon_models["tazer_knuckles_zm"] = undefined;
    level.buildable_wallbuy_weapon_models["870mcs_zm"] = undefined;
    level.buildable_wallbuy_weapon_angles = [];
    level.buildable_wallbuy_weapon_angles["ak74u_zm"] = undefined;
    level.buildable_wallbuy_weapon_angles["an94_zm"] = undefined;
    level.buildable_wallbuy_weapon_angles["pdw57_zm"] = undefined;
    level.buildable_wallbuy_weapon_angles["svu_zm"] = undefined;
    level.buildable_wallbuy_weapon_angles["tazer_knuckles_zm"] = undefined;
    level.buildable_wallbuy_weapon_angles["870mcs_zm"] = undefined;
}

init_buildables( buildablesenabledlist )
{
    registerclientfield( "scriptmover", "buildable_glint_fx", 12000, 1, "int", ::buildable_setup_glint );
    level.buildable_slot_count = max( 1, 2 ) + 1;
    level.buildable_clientfields = [];
    level.buildable_clientfields[0] = "buildable";
    level.buildable_clientfields[1] = "buildable" + "_pu";
    level.buildable_piece_counts = [];
    level.buildable_piece_counts[0] = 15;
    level.buildable_piece_counts[1] = 4;

    if ( -1 )
    {
        level.buildable_clientfields[2] = "buildable" + "_sq";
        level.buildable_piece_counts[2] = 13;
    }

    foreach ( buildable in buildablesenabledlist )
        add_zombie_buildable( buildable );

    level thread set_clientfield_buildables_code_callbacks();
}

include_buildables( buildablesenabledlist )
{
    foreach ( buildable in buildablesenabledlist )
        include_buildable( buildable );
}

buildable_setup_glint( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval == 1 )
    {
        offset = buildable_setup_glint_offset();
        self.buildable_glint = playfx( localclientnum, level._effect["fx_buried_key_glint"], self.origin + offset );
    }
    else if ( isdefined( self.buildable_glint ) )
        stopfx( localclientnum, self.buildable_glint );
}

buildable_setup_glint_offset()
{
    offset = ( 0, 0, 0 );

    if ( isdefined( self.model ) )
    {
        if ( issubstr( self.model, "booze" ) )
            offset = vectorscale( ( 0, 0, 1 ), 14.5 );
        else if ( issubstr( self.model, "candy" ) )
            offset = vectorscale( ( 0, 0, 1 ), 11.0 );
    }

    return offset;
}
