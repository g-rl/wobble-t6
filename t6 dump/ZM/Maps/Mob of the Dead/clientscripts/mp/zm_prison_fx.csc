// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_audio;
#include clientscripts\mp\createfx\zm_prison_fx;
#include clientscripts\mp\_fx;

precache_util_fx()
{

}

precache_scripted_fx()
{
    level._effect["eye_glow"] = loadfx( "maps/zombie_alcatraz/fx_zombie_eye_single_red" );
    level._effect["key_glint"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_key_glint" );
    level._effect["fx_alcatraz_plane_fire_trail"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_plane_fire_trail" );
    level._effect["alcatraz_dryer_light_green"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_dryer_light_green" );
    level._effect["alcatraz_dryer_light_red"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_dryer_light_red" );
    level._effect["alcatraz_dryer_light_yellow"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_dryer_light_yellow" );
    level._effect["headshot"] = loadfx( "impacts/fx_flesh_hit" );
    level._effect["headshot_nochunks"] = loadfx( "misc/fx_zombie_bloodsplat" );
    level._effect["bloodspurt"] = loadfx( "misc/fx_zombie_bloodspurt" );
    level._effect["animscript_gib_fx"] = loadfx( "maps/zombie/fx_zmb_tranzit_torso_explo" );
    level._effect["animscript_gibtrail_fx"] = loadfx( "trail/fx_trail_blood_streak" );
    level._effect["soul_charge_start"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_soul_charge_start" );
    level._effect["soul_charge"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_soul_charge" );
    level._effect["soul_charge_impact"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_soul_charge_impact" );
    level._effect["soul_charged"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_soul_charged" );
    level._effect["hell_portal"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_portal_hell" );
    level._effect["hell_portal_close"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_portal_hell_close" );
    level._effect["tomahawk_pickup"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_tomahawk_pickup" );
    level._effect["tomahawk_pickup_upgrade"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_tomahawk_pickup_ug" );
    level._effect["wolf_bite_blood"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_soul_charge_impact_sm" );
    level._effect["zapper_light_ready"] = loadfx( "maps/zombie/fx_zombie_zapper_light_green" );
    level._effect["zapper_light_notready"] = loadfx( "maps/zombie/fx_zombie_zapper_light_red" );
    level._effect["acid_spray"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_acid_spray" );
    level._effect["acid_death"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_acid_death" );
    level._effect["fan_blood"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_fan_blood" );
    level._effect["lightning_flash"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_lightning_lg" );
    level._effect["uzi_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_uzi" );
    level._effect["thompson_zm_fx"] = loadfx( "maps/zombie/fx_zmb_wall_buy_thompson" );
}

precache_createfx_fx()
{
    level._effect["fx_alcatraz_storm_start"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_storm_start" );
    level._effect["fx_alcatraz_vista_fog"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_vista_fog" );
    level._effect["fx_alcatraz_docks_fog"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_docks_fog" );
    level._effect["fx_alcatraz_fog_closet"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_fog_closet" );
    level._effect["fx_alcatraz_fire_works"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_fire_works" );
    level._effect["fx_alcatraz_tunnel_dust_fall"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_tunnel_dust_fall" );
    level._effect["fx_alcatraz_tunnel_ash"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_tunnel_ash" );
    level._effect["fx_alcatraz_steam_pipe_2"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_steam_pipe_2" );
    level._effect["fx_alcatraz_panel_on"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_panel_on" );
    level._effect["fx_alcatraz_door_blocker"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_door_blocker" );
    level._effect["fx_alcatraz_dryer_on"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_dryer_on" );
    level._effect["fx_alcatraz_elec_fence"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_elec_fence" );
    level._effect["fx_alcatraz_generator_smk"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_generator_smk" );
    level._effect["fx_alcatraz_generator_sparks"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_generator_sparks" );
    level._effect["fx_alcatraz_generator_exp"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_generator_exp" );
    level._effect["fx_alcatraz_elevator_spark"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_elevator_spark" );
    level._effect["fx_alcatraz_elec_key"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_elec_key" );
    level._effect["fx_alcatraz_sparks_ceiling"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_sparks_ceiling" );
    level._effect["fx_alcatraz_sparks_panel"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_sparks_panel" );
    level._effect["fx_alcatraz_fire_sm"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_fire_sm" );
    level._effect["fx_alcatraz_fire_xsm"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_fire_xsm" );
    level._effect["fx_alcatraz_embers_flat"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_embers_flat" );
    level._effect["fx_alcatraz_falling_fire"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_falling_fire" );
    level._effect["fx_alcatraz_steam_3floor"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_steam_3floor" );
    level._effect["fx_alcatraz_elec_box_amb"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_elec_box_amb" );
    level._effect["fx_alcatraz_blood_drip"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_blood_drip" );
    level._effect["fx_alcatraz_godray_grill"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_godray_grill" );
    level._effect["fx_alcatraz_godray_grill_lg"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_godray_grill_lg" );
    level._effect["fx_alcatraz_godray_skinny"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_godray_skinny" );
    level._effect["fx_alcatraz_ground_fog"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_ground_fog" );
    level._effect["fx_alcatraz_flies"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_flies" );
    level._effect["fx_alcatraz_candle_fire"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_candle_fire" );
    level._effect["fx_alcatraz_portal_amb"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_portal_amb" );
    level._effect["fx_alcatraz_fire_md"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_fire_md" );
    level._effect["fx_alcatraz_smk_linger"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_smk_linger" );
    level._effect["fx_alcatraz_embers_indoor"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_embers_indoor" );
    level._effect["fx_alcatraz_papers"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_papers" );
    level._effect["fx_alcatraz_ceiling_fire"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_ceiling_fire" );
    level._effect["fx_alcatraz_steam_ash"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_steam_ash" );
    level._effect["fx_alcatraz_godray_jail"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_godray_jail" );
    level._effect["fx_alcatraz_water_drip"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_water_drip" );
    level._effect["fx_alcatraz_shower_steam"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_shower_steam" );
    level._effect["fx_alcatraz_steam_pipe"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_steam_pipe" );
    level._effect["fx_alcatraz_light_tinhat"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_light_tinhat" );
    level._effect["fx_alcatraz_light_round_oo"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_light_round_oo" );
    level._effect["fx_alcatraz_light_tinhat_oo"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_light_tinhat_oo" );
    level._effect["fx_alcatraz_flight_clouds"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_flight_clouds" );
    level._effect["fx_alcatraz_lightning_bridge"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_lightning_bridge" );
    level._effect["fx_alcatraz_elec_chair"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_elec_chair" );
    level._effect["fx_alcatraz_lighthouse"] = loadfx( "maps/zombie_alcatraz/fx_alcatraz_light_house" );
}

main()
{
    clientscripts\mp\createfx\zm_prison_fx::main();
    clientscripts\mp\_fx::reportnumeffects();
    precache_util_fx();
    precache_createfx_fx();
    precache_fxanim_props();
    disablefx = getdvarint( #"disable_fx" );

    if ( !isdefined( disablefx ) || disablefx <= 0 )
        precache_scripted_fx();

    level thread acid_trap_fx_monitor( "acid_trap", "cafeteria" );
}

acid_trap_fx_monitor( name, side )
{
    while ( true )
    {
        level waittill( name );
        fire_points = getstructarray( name, "targetname" );

        for ( i = 0; i < fire_points.size; i++ )
            fire_points[i] thread acid_trap_fx( name, side );
    }
}

acid_trap_fx( name, side )
{
    ang = self.angles;
    forward = anglestoforward( ang );
    up = anglestoup( ang );

    if ( isdefined( self.loopfx ) )
    {
        for ( i = 0; i < self.loopfx.size; i++ )
            self.loopfx[i] delete();

        self.loopfx = [];
    }

    if ( !isdefined( self.loopfx ) )
        self.loopfx = [];

    players = getlocalplayers();
    playsound( 0, "zmb_trap_acid_start", self.origin );
    playloopat( "zmb_trap_acid_loop", self.origin );

    for ( i = 0; i < players.size; i++ )
    {
        self.loopfx[i] = spawnfx( i, level._effect["acid_spray"], self.origin, 0, forward, up );
        triggerfx( self.loopfx[i] );
    }

    level waittill( side + "off" );
    playsound( 0, "zmb_trap_acid_end", self.origin );
    stoploopat( "zmb_trap_acid_loop", self.origin );

    for ( i = 0; i < self.loopfx.size; i++ )
        self.loopfx[i] delete();

    self.loopfx = [];
}

acid_trap_death_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval == 1 )
    {
        self.acid_trap_death_fx = playfxontag( localclientnum, level._effect["acid_death"], self, "TAG_STOWED_BACK" );
        playsound( 0, "zmb_exp_jib_acid_zombie", self.origin );
    }
    else if ( isdefined( self.acid_trap_death_fx ) )
        stopfx( localclientnum, self.acid_trap_death_fx );
}

spawn_glowfx_for_shockboxes( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval == 1 )
        playfxontag( localclientnum, level._effect["fx_alcatraz_elec_box_amb"], self, "TAG_ORIGIN" );
}

fan_trap_blood_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval == 1 )
    {
        self.fan_trap_blood_fx = playfxontag( localclientnum, level._effect["fan_blood"], self, "J_Neck" );
        playsound( 0, "zmb_exp_jib_fan_zombie", self.origin );
    }
    else if ( isdefined( self.fan_trap_blood_fx ) )
        stopfx( localclientnum, self.fan_trap_blood_fx );
}

sq_bg_reward_portal_fx( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    s_reward_fx = getstruct( "sq_bg_reward_fx", "targetname" );

    if ( newval == 1 )
    {
        v_forward = anglestoright( self.angles );
        v_up = anglestoforward( self.angles );
        level.sq_bg_portal_fx = playfx( localclientnum, level._effect["hell_portal"], s_reward_fx.origin );
    }
    else
    {
        if ( isdefined( level.sq_bg_portal_fx ) )
            stopfx( localclientnum, level.sq_bg_portal_fx );

        level.sq_bg_portal_fx = playfx( localclientnum, level._effect["hell_portal_close"], s_reward_fx.origin );
    }
}

#using_animtree("fxanim_props");

precache_fxanim_props()
{
    level.scr_anim["fxanim_props"]["wirespark_med"] = %fxanim_gp_wirespark_med_anim;
    level.scr_anim["fxanim_props"]["dryer_start"] = %fxanim_zom_al_industrial_dryer_start_anim;
    level.scr_anim["fxanim_props"]["dryer_idle"] = %fxanim_zom_al_industrial_dryer_idle_anim;
    level.scr_anim["fxanim_props"]["dryer_end"] = %fxanim_zom_al_industrial_dryer_end_anim;
    level.scr_anim["fxanim_props"]["dryer_hide"] = %fxanim_zom_al_industrial_dryer_hide_anim;
    level.scr_anim["fxanim_props"]["pulley_down"] = %fxanim_zom_al_key_pulley_down_anim;
    level.scr_anim["fxanim_props"]["pulley_up"] = %fxanim_zom_al_key_pulley_up_anim;
    level.scr_anim["fxanim_props"]["crane_palette"] = %fxanim_zom_al_crane_palette_anim;
    level.scr_anim["fxanim_props"]["chain_hook_rotate"] = %fxanim_zom_al_chain_short_hook_rotate_anim;
    level.scr_anim["fxanim_props"]["bodybag_rotate"] = %fxanim_zom_al_bodybag_rotate_anim;
    level.scr_anim["fxanim_props"]["chain_hook_swing"] = %fxanim_zom_al_chain_short_hook_swing_anim;
    level.scr_anim["fxanim_props"]["bodybag_swing"] = %fxanim_zom_al_bodybag_swing_anim;
    level.scr_anim["fxanim_props"]["chain_hook_crane"] = %fxanim_zom_al_chain_short_hook_crane_anim;
    level.scr_anim["fxanim_props"]["bodybag_crane"] = %fxanim_zom_al_bodybag_crane_anim;
}

play_fx_prop_anims( localclientnum )
{
    fxanim_props = getentarray( localclientnum, "fxanim", "targetname" );
    array_thread( fxanim_props, ::fxanim_props_think, localclientnum );
    play_quest_prop_anims( localclientnum );
}

play_quest_prop_anims( localclientnum )
{
    fxanim_props = getentarray( localclientnum, "fxanim", "targetname" );
    m_dryer = getent( localclientnum, "dryer_model", "targetname" );
    m_dryer waittill_dobj( localclientnum );

    for ( i = 0; i < fxanim_props.size; i++ )
    {
        if ( fxanim_props[i].model == "fxanim_zom_al_industrial_dryer_mod" )
            m_dryer linkto( fxanim_props[i], "dryer_jnt" );
    }
}

fxanim_setup_pulley( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    level endon( "host_migration_start" );

    if ( bwasdemojump )
        newval = oldval;

    if ( newval == 1 )
        str_master_key_location = "east";
    else if ( newval == 2 )
        str_master_key_location = "west";

    fx_key_glint = undefined;
    fxanim_props = getentarray( localclientnum, "fxanim", "targetname" );

    for ( i = 0; i < fxanim_props.size; i++ )
    {
        if ( isdefined( fxanim_props[i].fxanim_waittill_1 ) )
        {
            if ( fxanim_props[i].fxanim_waittill_1 == "fxanim_" + str_master_key_location + "_pulley_down_start" )
            {
                fxanim_props[i] waittill_dobj( localclientnum );
                fx_key_glint = playfxontag( localclientnum, level._effect["key_glint"], fxanim_props[i], "tag_key" );
                origin_tag_key = fxanim_props[i] gettagorigin( "tag_key" );
                m_master_key_attachment = getent( localclientnum, "master_key_attachment", "targetname" );
                m_master_key_attachment waittill_dobj( localclientnum );
                m_master_key_attachment.origin = origin_tag_key;
                m_master_key_attachment linkto( fxanim_props[i], "tag_key" );
                m_master_key_attachment playloopsound( "amb_electrical_fence", 1 );
                break;
            }
        }
    }

    level waittill( "master_key_is_lowered" );
    m_master_key_attachment stoploopsound( 1 );
    m_master_key_attachment hide();
    stopfx( localclientnum, fx_key_glint );
}

fxanim_props_think( localclientnum )
{
    self endon( "death" );
    self endon( "entityshutdown" );
    self endon( "delete" );
    wait 3;
    self useanimtree( #animtree );
    self thread fxanim_props_wait_1( localclientnum );
    self thread fxanim_props_wait_2( localclientnum );
    self thread fxanim_props_wait_3( localclientnum );
    self thread fxanim_props_wait_4( localclientnum );
}

fxanim_props_wait_1( localclientnum )
{
    if ( isdefined( self.fxanim_waittill_1 ) )
        level waittill( self.fxanim_waittill_1 );

    if ( isdefined( self.fxanim_wait ) )
        wait( self.fxanim_wait );

    if ( isdefined( self.fxanim_scene_1 ) )
    {
        if ( isdefined( level.scr_anim["fxanim_props"][self.fxanim_scene_1] ) )
        {
            self clearanim( level.scr_anim["fxanim_props"][self.fxanim_scene_1], 0 );
            self setflaggedanim( "alcatraz_fxanim", level.scr_anim["fxanim_props"][self.fxanim_scene_1], 1.0, 0.0, 1.0 );
        }
    }
}

fxanim_props_wait_2( localclientnum )
{
    if ( isdefined( self.fxanim_waittill_2 ) )
        level waittill( self.fxanim_waittill_2 );

    if ( isdefined( self.fxanim_wait ) )
        wait( self.fxanim_wait );

    if ( isdefined( self.fxanim_scene_2 ) )
    {
        if ( isdefined( level.scr_anim["fxanim_props"][self.fxanim_scene_2] ) )
        {
            self clearanim( level.scr_anim["fxanim_props"][self.fxanim_scene_1], 0 );
            self setflaggedanim( "alcatraz_fxanim", level.scr_anim["fxanim_props"][self.fxanim_scene_2], 1.0, 0.0, 1.0 );
        }
    }
}

fxanim_props_wait_3( localclientnum )
{
    if ( isdefined( self.fxanim_waittill_3 ) )
        level waittill( self.fxanim_waittill_3 );

    if ( isdefined( self.fxanim_wait ) )
        wait( self.fxanim_wait );

    if ( isdefined( self.fxanim_scene_3 ) )
    {
        if ( isdefined( level.scr_anim["fxanim_props"][self.fxanim_scene_3] ) )
        {
            self clearanim( level.scr_anim["fxanim_props"][self.fxanim_scene_2], 0 );
            self setflaggedanim( "alcatraz_fxanim", level.scr_anim["fxanim_props"][self.fxanim_scene_3], 1.0, 0.0, 1.0 );
        }
    }
}

fxanim_props_wait_4( localclientnum )
{
    if ( isdefined( self.script_noteworthy ) )
        level waittill( self.script_noteworthy );

    if ( isdefined( self.fxanim_wait ) )
        wait( self.fxanim_wait );

    if ( isdefined( self.script_string ) )
    {
        if ( isdefined( level.scr_anim["fxanim_props"][self.script_string] ) )
        {
            self clearanim( level.scr_anim["fxanim_props"][self.fxanim_scene_3], 0 );
            self setflaggedanim( "alcatraz_fxanim", level.scr_anim["fxanim_props"][self.script_string], 1.0, 0.0, 1.0 );
        }
    }
}

setup_prop_anims()
{
    waitforclient( 0 );
    players = level.localplayers;

    for ( i = 0; i < players.size; i++ )
        players[i] thread play_fx_prop_anims( i );
}

rumble_electric_chair( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    self endon( "death" );
    self endon( "disconnect" );

    if ( isdefined( self ) && self islocalplayer() )
    {
        localclientnum = self getlocalclientnumber();

        if ( isdefined( localclientnum ) )
        {
            if ( newval == 1 )
            {
                self earthquake( 0.1, 0.25, self.origin, 1500 );
                self playrumbleonentity( localclientnum, "damage_light" );
            }
            else if ( newval == 2 )
            {
                self earthquake( 0.1, 0.25, self.origin, 1500 );
                self playrumbleonentity( localclientnum, "damage_light" );
                wait 0.25;
                self earthquake( 1, 5, self.origin, 1500 );
                self playrumbleonentity( localclientnum, "explosion_generic" );
                wait 5;
                self stoprumble( localclientnum, "explosion_generic" );
            }
        }
    }
}

effects_escape_flight( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    self endon( "death" );
    self endon( "disconnect" );
    self thread rumble_escape_flight( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump );
    self thread earthquake_escape_flight( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump );
}

rumble_escape_flight( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    self notify( "rumble_escape_flight" );
    self endon( "rumble_escape_flight" );
    self endon( "death" );
    self endon( "disconnect" );

    if ( isdefined( self ) && self islocalplayer() )
    {
        localclientnum = self getlocalclientnumber();

        if ( isdefined( localclientnum ) )
        {
            switch ( newval )
            {
                case 1:
                    for ( i = 0; i < 20; i++ )
                    {
                        self playrumbleonentity( localclientnum, "buzz_high" );
                        wait 0.2;
                    }

                    for ( i = 0; i < 60; i++ )
                    {
                        self playrumbleonentity( localclientnum, "buzz_high" );
                        wait 0.1;
                    }

                    break;
                case 2:
                    self playrumbleonentity( localclientnum, "damage_heavy" );

                    for ( i = 0; i < 6; i++ )
                    {
                        self playrumbleonentity( localclientnum, "damage_light" );
                        wait 0.2;
                    }

                    for ( i = 0; i < 16; i++ )
                    {
                        self playrumbleonentity( localclientnum, "damage_heavy" );
                        wait 0.05;
                    }

                    for ( i = 0; i < 40; i++ )
                    {
                        self playrumbleonentity( localclientnum, "damage_light" );
                        wait 0.05;
                    }

                    for ( i = 0; i < 20; i++ )
                    {
                        self playrumbleonentity( localclientnum, "slide_rumble" );
                        wait 0.05;
                    }

                    wait 1.5;

                    for ( i = 0; i < 20; i++ )
                    {
                        self playrumbleonentity( localclientnum, "buzz_high" );
                        wait 0.3;
                    }

                    break;
                case 3:
                    for ( i = 0; i < 3; i++ )
                    {
                        self playrumbleonentity( localclientnum, "damage_heavy" );
                        wait 0.1;
                    }

                    for ( i = 0; i < 10; i++ )
                    {
                        self playrumbleonentity( localclientnum, "damage_light" );
                        wait( randomfloatrange( 0.1, 0.2 ) );
                    }

                    for ( i = 0; i < 15; i++ )
                    {
                        self playrumbleonentity( localclientnum, "buzz_high" );
                        wait( randomfloatrange( 0.4, 0.5 ) );
                    }

                    break;
                case 4:
                    for ( i = 0; i < 3; i++ )
                    {
                        self playrumbleonentity( localclientnum, "damage_heavy" );
                        wait 0.05;
                    }

                    break;
                case 5:
                    for ( i = 0; i < 5; i++ )
                    {
                        self playrumbleonentity( localclientnum, "brutus_footsteps" );
                        wait 0.05;
                    }

                    break;
            }
        }
    }
}

earthquake_escape_flight( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    self notify( "earthquake_escape_flight" );
    self endon( "earthquake_escape_flight" );
    self endon( "death" );
    self endon( "disconnect" );

    if ( isdefined( self ) && self islocalplayer() )
    {
        localclientnum = self getlocalclientnumber();

        if ( isdefined( localclientnum ) )
        {
            switch ( newval )
            {
                case 1:
                    for ( i = 0; i < 250; i++ )
                    {
                        self earthquake( 0.1, 1, self.origin, 1500 );
                        wait 0.04;
                    }

                    break;
                case 2:
                    self earthquake( 0.75, 1, self.origin, 1500 );

                    for ( i = 0; i < 6; i++ )
                    {
                        self earthquake( 0.1, 1, self.origin, 1500 );
                        wait 0.2;
                    }

                    for ( i = 0; i < 4; i++ )
                    {
                        self earthquake( 0.4, 1, self.origin, 1500 );
                        wait 0.2;
                    }

                    for ( i = 0; i < 10; i++ )
                    {
                        self earthquake( 0.1, 1, self.origin, 1500 );
                        wait 0.05;
                    }

                    for ( i = 0; i < 20; i++ )
                    {
                        self earthquake( 0.05, 1, self.origin, 1500 );
                        wait 0.05;
                    }

                    for ( i = 0; i < 50; i++ )
                    {
                        self earthquake( 0.1, 1, self.origin, 1500 );
                        wait 0.2;
                    }

                    break;
                case 3:
                    for ( i = 0; i < 10; i++ )
                    {
                        self earthquake( 0.5, 1, self.origin, 1500 );
                        wait( randomfloatrange( 0.1, 0.2 ) );
                    }

                    for ( i = 0; i < 20; i++ )
                    {
                        self earthquake( 0.1, 1, self.origin, 1500 );
                        wait( randomfloatrange( 0.2, 0.3 ) );
                    }

                    break;
                case 4:
                    self earthquake( 1, 1, self.origin, 1500 );

                    for ( i = 0; i < 10; i++ )
                    {
                        self earthquake( 0.5, 1, self.origin, 1500 );
                        wait( randomfloatrange( 0.1, 0.15 ) );
                    }

                    break;
            }
        }
    }
}
