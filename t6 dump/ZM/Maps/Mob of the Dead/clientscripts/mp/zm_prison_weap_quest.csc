// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_filter;
#include clientscripts\mp\zombies\_zm_weapons;
#include clientscripts\mp\zombies\_zm_utility;

#using_animtree("fxanim_props");

tomahawk_rune_init()
{
    level.wolfhead_intro_anim = %o_zombie_dreamcatcher_intro;
    level.wolfhead_outtro_anim = %o_zombie_dreamcatcher_outtro;
    level.wolfhead_pre_eat_anims = [];
    level.wolfhead_pre_eat_anims["right"] = %o_zombie_dreamcatcher_wallconsume_pre_eat_r;
    level.wolfhead_pre_eat_anims["left"] = %o_zombie_dreamcatcher_wallconsume_pre_eat_l;
    level.wolfhead_pre_eat_anims["front"] = %o_zombie_dreamcatcher_wallconsume_pre_eat_f;
    level.wolfhead_eat_anims = [];
    level.wolfhead_eat_anims["right"] = %o_zombie_dreamcatcher_wallconsume_align_r;
    level.wolfhead_eat_anims["left"] = %o_zombie_dreamcatcher_wallconsume_align_l;
    level.wolfhead_eat_anims["front"] = %o_zombie_dreamcatcher_wallconsume_align_f;
    level.wolfhead_body_anims = [];
    level.wolfhead_body_anims["right"] = %ai_zombie_dreamcatcher_wallconsume_align_r;
    level.wolfhead_body_anims["left"] = %ai_zombie_dreamcatcher_wallconsume_align_l;
    level.wolfhead_body_anims["front"] = %ai_zombie_dreamcatcher_wallconsume_align_f;
    level.a_wolf_structs = getstructarray( "wolf_position", "targetname" );
    registerclientfield( "actor", "make_client_clone", 9000, 4, "int", ::pose_dead_body );

    for ( i = 0; i < level.a_wolf_structs.size; i++ )
        registerclientfield( "world", level.a_wolf_structs[i].script_parameters, 9000, 3, "int", ::soul_catcher_callback );

    level.fake_body_death_anim = %ai_zombie_dreamcatch_impact;
    assemble_fake_body_head_arrays();
    waitforallclients();
    wait 1;
    level.wolf_heads = [];
    level.wolf_runes = [];
    level.wolf_bodies = [];
    players = getlocalplayers();

    for ( j = 0; j < players.size; j++ )
    {
        level.wolf_heads[j] = [];
        level.wolf_runes[j] = [];
        level.wolf_bodies[j] = [];

        for ( i = 0; i < level.a_wolf_structs.size; i++ )
        {
            level.wolf_heads[j][level.a_wolf_structs[i].script_parameters] = getent( j, level.a_wolf_structs[i].script_label, "targetname" );
            level.wolf_heads[j][level.a_wolf_structs[i].script_parameters] hide();
            level.wolf_heads[j][level.a_wolf_structs[i].script_parameters] useanimtree( #animtree );
            level.wolf_bodies[j][level.a_wolf_structs[i].script_parameters] = getent( j, level.a_wolf_structs[i].script_friendname, "targetname" );
            level.wolf_bodies[j][level.a_wolf_structs[i].script_parameters] hide();
            level.wolf_bodies[j][level.a_wolf_structs[i].script_parameters] useanimtree( #animtree );
            level.wolf_runes[j][level.a_wolf_structs[i].script_parameters] = getent( j, level.a_wolf_structs[i].script_noteworthy, "targetname" );
        }
    }

    level.weap_quest_init = 1;
}

soul_catcher_callback( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    while ( !isdefined( level.weap_quest_init ) )
        wait 0.05;

    if ( binitialsnap )
    {
        if ( newval == 2 || newval == 3 || newval == 5 || newval == 4 )
        {
            if ( !isdefined( level.wolf_heads[localclientnum][fieldname].portal_fx ) )
            {
                rune = level.wolf_runes[localclientnum][fieldname];
                rune_forward = anglestoforward( rune.angles + vectorscale( ( 0, 1, 0 ), 90.0 ) );
                rune_up = anglestoup( rune.angles );
                level.wolf_heads[localclientnum][fieldname].portal_fx = playfx( localclientnum, level._effect["hell_portal"], rune.origin - rune_forward * 2.5 - rune_up * 24, rune_forward, rune_up );
            }
        }
    }
    else if ( bwasdemojump )
    {
        if ( newval == 2 || newval == 3 || newval == 5 || newval == 4 )
        {
            if ( isdefined( level.wolf_heads[localclientnum][fieldname].portal_fx ) )
                stopfx( localclientnum, level.wolf_heads[localclientnum][fieldname].portal_fx );

            rune = level.wolf_runes[localclientnum][fieldname];
            rune_forward = anglestoforward( rune.angles + vectorscale( ( 0, 1, 0 ), 90.0 ) );
            rune_up = anglestoup( rune.angles );
            level.wolf_heads[localclientnum][fieldname].portal_fx = playfx( localclientnum, level._effect["hell_portal"], rune.origin - rune_forward * 2.5 - rune_up * 24, rune_forward, rune_up );
        }
    }

    if ( newval == 0 )
    {
        level.wolf_heads[localclientnum][fieldname] hide();
        level.wolf_runes[localclientnum][fieldname] show();
        level.wolf_bodies[localclientnum][fieldname] hide();
    }
    else if ( newval == 1 )
    {
        level.wolf_heads[localclientnum][fieldname] show();
        level.wolf_runes[localclientnum][fieldname] hide();
        level.wolf_bodies[localclientnum][fieldname] hide();
        level.wolf_heads[localclientnum][fieldname] thread wolfhead_arrive( localclientnum, level.wolf_runes[localclientnum][fieldname] );
    }
    else if ( newval == 2 )
    {
        level.wolf_heads[localclientnum][fieldname] show();
        level.wolf_runes[localclientnum][fieldname] hide();
        level.wolf_bodies[localclientnum][fieldname] hide();

        if ( isdefined( level.wolf_bodies[localclientnum][fieldname].head ) )
        {
            if ( isdefined( level.wolf_bodies[localclientnum][fieldname].head.hat ) )
                level.wolf_bodies[localclientnum][fieldname].head.hat hide();

            level.wolf_bodies[localclientnum][fieldname].head hide();
        }

        if ( oldval == 3 || oldval == 5 || oldval == 4 )
            playsound( 0, "evt_wolfhead_body_count", level.wolf_heads[localclientnum][fieldname].origin );

        level.wolf_heads[localclientnum][fieldname] thread wolfhead_idle();
    }
    else if ( newval == 3 || newval == 5 || newval == 4 )
    {
        level.wolf_heads[localclientnum][fieldname] show();
        level.wolf_runes[localclientnum][fieldname] hide();

        if ( newval == 3 )
            level.wolf_heads[localclientnum][fieldname] thread wolfhead_eat_aligned( level.wolf_bodies[localclientnum][fieldname], localclientnum, "front" );
        else if ( newval == 4 )
            level.wolf_heads[localclientnum][fieldname] thread wolfhead_eat_aligned( level.wolf_bodies[localclientnum][fieldname], localclientnum, "right" );
        else
            level.wolf_heads[localclientnum][fieldname] thread wolfhead_eat_aligned( level.wolf_bodies[localclientnum][fieldname], localclientnum, "left" );
    }
    else if ( newval == 6 )
    {
        level.wolf_heads[localclientnum][fieldname] show();
        level.wolf_runes[localclientnum][fieldname] show();
        level.wolf_bodies[localclientnum][fieldname] hide();
        level.wolf_bodies[localclientnum][fieldname].head hide();
        level.wolf_runes[localclientnum][fieldname] stoploopsound();

        if ( isdefined( level.wolf_bodies[localclientnum][fieldname].head.hat ) )
            level.wolf_bodies[localclientnum][fieldname].head.hat hide();

        level.wolf_heads[localclientnum][fieldname] thread wolfhead_depart( localclientnum, level.wolf_runes[localclientnum][fieldname] );
    }
    else if ( newval == 7 )
    {
        level.wolf_heads[localclientnum][fieldname] hide();
        level.wolf_runes[localclientnum][fieldname] show();
        level.wolf_bodies[localclientnum][fieldname] hide();
        level.wolf_bodies[localclientnum][fieldname].head hide();

        if ( isdefined( level.wolf_bodies[localclientnum][fieldname].head.hat ) )
            level.wolf_bodies[localclientnum][fieldname].head.hat hide();

        level.wolf_runes[localclientnum][fieldname] setmodel( "p6_zm_al_dream_catcher" );
        playfxontag( localclientnum, level._effect["soul_charged"], level.wolf_runes[localclientnum][fieldname], "tag_origin" );
        level.wolf_runes[localclientnum][fieldname] playloopsound( "evt_runeglow_loop" );
    }
}

wolfhead_arrive( localclientnum, rune )
{
    rune_forward = anglestoforward( rune.angles + vectorscale( ( 0, 1, 0 ), 90.0 ) );
    rune_up = anglestoup( rune.angles );
    self.portal_fx = playfx( localclientnum, level._effect["hell_portal"], rune.origin - rune_forward * 2.5 - rune_up * 24, rune_forward, rune_up );
    self playsound( 0, "evt_wolfhead_spawn" );
    self.wolf_ent = spawn( 0, self.origin, "script_origin" );
    self.wolf_ent playloopsound( "evt_wolfhead_fire_loop" );
    n_anim_length = getanimlength( level.wolfhead_intro_anim );
    self setanim( level.wolfhead_intro_anim, 1.0, 0, 1.0 );
    wait( n_anim_length );
}

wolfhead_idle()
{
    self endon( "wolf_eating" );
    self endon( "wolf_departing" );
    self notify( "wolf_idling" );

    if ( !isdefined( level.wolf_head_idle_anims ) )
    {
        level.wolf_head_idle_anims = [];
        level.wolf_head_idle_anims[0] = %o_zombie_dreamcatcher_idle;
        level.wolf_head_twitch_anims = [];
        level.wolf_head_twitch_anims[0] = %o_zombie_dreamcatcher_idle_twitch_scan;
        level.wolf_head_twitch_anims[1] = %o_zombie_dreamcatcher_idle_twitch_shake;
        level.wolf_head_twitch_anims[2] = %o_zombie_dreamcatcher_idle_twitch_yawn;
    }

    while ( true )
    {
        self clearanim( %root, 0.1 );
        random_idle_anim = random( level.wolf_head_idle_anims );
        n_anim_length = getanimlength( random_idle_anim );
        self setanim( random_idle_anim, 1.0, 0.2, 1.0 );
        wait( n_anim_length );
        self clearanim( %root, 0.1 );
        random_twitch_anim = random( level.wolf_head_twitch_anims );
        n_anim_length = getanimlength( random_twitch_anim );
        self setanim( random_twitch_anim, 1.0, 0.2, 1.0 );
        wait( n_anim_length );
    }
}

pose_dead_body( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    self endon( "entityshutdown" );

    if ( !self hasdobj( localclientnum ) )
    {
        self waittill_dobj( localclientnum );
        wait 0.016;
    }

    while ( !isdefined( level.weap_quest_init ) )
        wait 0.05;

    if ( !isdefined( self ) )
        return;

    s_closest = get_array_of_closest( self.origin, level.a_wolf_structs );
    fieldname = s_closest[0].script_parameters;
    m_body = level.wolf_bodies[localclientnum][fieldname];

    if ( isdefined( m_body ) )
    {
        if ( isdefined( m_body.head ) )
        {
            if ( isdefined( m_body.head.hat ) )
                m_body.head.hat delete();

            m_body.head delete();
        }

        m_body delete();
        m_body = spawn( localclientnum, ( 0, 0, 0 ), "script_model" );

        if ( issubstr( self.model, "body2" ) )
            m_body setmodel( "c_zom_inmate_body2" );
        else if ( issubstr( self.model, "body1" ) )
            m_body setmodel( "c_zom_inmate_body1" );
        else
            m_body setmodel( "c_zom_guard_body" );

        m_body hide();
        m_body.origin = self.origin;
        m_body.angles = self.angles;
        m_head = spawn( localclientnum, m_body gettagorigin( "J_Spine4" ), "script_model" );

        if ( newval > 4 )
        {
            head_index = newval % 4 + 1;
            m_head setmodel( level.wolf_body_fake_heads[head_index] );
            m_hat = spawn( localclientnum, m_head gettagorigin( "J_Head" ), "script_model" );
            m_hat setmodel( "c_zom_guard_hat" );
            m_hat.angles = m_head.angles;
            m_hat linkto( m_head, "j_head" );
            m_hat hide();
            m_head.hat = m_hat;
        }
        else
            m_head setmodel( level.wolf_body_fake_heads[newval] );

        m_head hide();
        m_head.angles = m_body gettagangles( "J_Spine4" );
        m_head linkto( m_body, "j_spine4" );
        m_body.head = m_head;
        level.wolf_bodies[localclientnum][fieldname] = m_body;
    }

    m_body useanimtree( #animtree );
    m_body.origin = self.origin - vectorscale( ( 0, 0, 1 ), 1000.0 );
    m_body show();
    m_body clearanim( %root, 0.1 );
    m_body setanimrestart( level.fake_body_death_anim, 1, 0.2, 10 );
    anim_time = getanimlength( level.fake_body_death_anim ) / 10;
    wait 0.1;

    if ( isdefined( m_head ) )
    {
        m_head show();

        if ( isdefined( m_hat ) )
            m_hat show();
    }

    wait( anim_time );

    if ( isdefined( m_body ) )
    {
        m_body hide();
        m_body.origin = self.origin;
        m_body.angles = self.angles;
        m_body linkto( self, "tag_origin" );
    }
}

wolfhead_pre_eat_aligned( body, localclientnum, direction )
{
    s_closest = get_array_of_closest( self.origin, level.a_wolf_structs );
    fieldname = s_closest[0].script_parameters;
    m_body = level.wolf_bodies[localclientnum][fieldname];
    m_wolf = level.wolf_heads[localclientnum][fieldname];
/#
    iprintlnbold( "Eating Zombie on the: " + direction );
#/
    m_wolf clearanim( %root, 0.1 );
    m_wolf setanimrestart( level.wolfhead_pre_eat_anims[direction], 1, 0.2, 1 );
    m_body unlink();
    m_body show();
    m_body body_moveto_wolf( m_wolf, localclientnum );
}

body_moveto_wolf( m_wolf, localclientnum )
{
    if ( !isdefined( self.m_soul_fx_player ) )
    {
        self.m_soul_fx_player = spawn( localclientnum, self gettagorigin( "J_SpineLower" ), "script_model" );
        self.m_soul_fx_player setmodel( "tag_origin" );
    }

    self clearanim( %root, 0.1 );
    self setanimrestart( %ai_zombie_dreamcatch_rise, 1, 0.2, 1 );
    vec_dir = m_wolf.origin - self.origin;
    vec_dir_scaled = vectorscale( vec_dir, 0.2 );
    self.m_soul_fx_player.angles = vectortoangles( vec_dir );
    self.m_soul_fx_player linkto( self );
    move_fx = playfxontag( localclientnum, level._effect["soul_charge_start"], self.m_soul_fx_player, "tag_origin" );
    self playsound( 0, "evt_soulsuck_body" );
    self moveto( self.origin + vec_dir_scaled, 1.5, 1.5 );
    self waittill( "movedone" );
    self clearanim( %root, 0.1 );
    self setanimrestart( %ai_zombie_dreamcatch_shrink_a, 1, 0.2, 1 );
    zombie_move_offset = anglestoforward( m_wolf.angles ) * 36 + anglestoup( m_wolf.angles ) * 0;
    self moveto( m_wolf.origin + zombie_move_offset, 0.5, 0.5 );
    self waittill( "movedone" );

    if ( !isdefined( self ) )
        return;

    if ( isdefined( move_fx ) )
        stopfx( localclientnum, move_fx );

    if ( isdefined( self.m_soul_fx_player ) )
    {
        self.m_soul_fx_player unlink();
        self.m_soul_fx_player delete();
        self.m_soul_fx_player = undefined;
    }
}

wolfhead_eat_aligned( body, localclientnum, direction )
{
    self endon( "wolf_idling" );
    self endon( "wolf_departing" );
    self notify( "wolf_eating" );
    self wolfhead_pre_eat_aligned( body, localclientnum, direction );
    body.origin = self gettagorigin( "tag_mouth_fx" );
    body.angles = self gettagangles( "tag_mouth_fx" );
    body linkto( self, "tag_mouth_fx", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    self clearanim( %root, 0.1 );
    body clearanim( %root, 0.1 );
    n_anim_length = getanimlength( level.wolfhead_eat_anims[direction] );
    self playsound( 0, "evt_wolfhead_eat" );
    self thread play_blood_fx_on_bite( localclientnum );
    self setflaggedanim( "bite", level.wolfhead_eat_anims[direction], 1.0, 0.0, 1.0 );
    body setflaggedanim( "bite", level.wolfhead_body_anims[direction], 1.0, 0.2, 1.0 );
    wait( n_anim_length );
    body unlink();
}

play_blood_fx_on_bite( localclientnum )
{
    while ( true )
    {
        self waittill( "bite", note );

        if ( note == "blood" )
            playfxontag( localclientnum, level._effect["soul_charge_impact"], self, "TAG_MOUTH_FX" );
        else if ( note == "blood_sm" )
            playfxontag( localclientnum, level._effect["wolf_bite_blood"], self, "TAG_MOUTH_FX" );
    }
}

wolfhead_depart( localclientnum, rune )
{
    self clearanim( %root, 0.1 );
    self setanimrestart( level.wolfhead_outtro_anim, 1.0, 0.2, 1.0 );
    rune_forward = anglestoforward( rune.angles + vectorscale( ( 0, 1, 0 ), 90.0 ) );
    rune_up = anglestoup( rune.angles );
    stopfx( localclientnum, self.portal_fx );
    self.portal_fx = playfx( localclientnum, level._effect["hell_portal_close"], rune.origin - rune_forward * 2.5 - rune_up * 24, rune_forward, rune_up );
    self playsound( 0, "evt_wolfhead_depart" );

    if ( isdefined( self.wolf_ent ) )
    {
        self.wolf_ent stoploopsound();
        self.wolf_ent delete();
    }

    self notify( "wolf_departing" );
}

assemble_fake_body_head_arrays()
{
    level.wolf_body_fake_heads = [];
    level.wolf_body_fake_heads[1] = "c_zom_zombie_barbwire_head";
    level.wolf_body_fake_heads[2] = "c_zom_zombie_hellcatraz_head";
    level.wolf_body_fake_heads[3] = "c_zom_zombie_mask_head";
    level.wolf_body_fake_heads[4] = "c_zom_zombie_slackjaw_head";
}

is_classic()
{
    var = getdvar( #"ui_zm_gamemodegroup" );

    if ( var == "zclassic" )
        return true;

    return false;
}
