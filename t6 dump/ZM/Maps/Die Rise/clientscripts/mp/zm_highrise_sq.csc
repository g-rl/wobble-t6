// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_audio;

init()
{
    level thread dragon_fireworks_init();
    level thread dragon_fireball_init();
}

sq_highrise_clientfield_init()
{
    registerclientfield( "toplayer", "clientfield_sq_vo", 5000, 5, "int", ::sq_play_maxis_vo, 1 );
    level.sq_clientfield_vo = array( "none", "vox_maxi_sidequest_activ_dragons_0", "vox_maxi_sidequest_congratulate_0", "vox_maxi_sidequest_create_trample_0", "vox_maxi_sidequest_create_trample_1", "vox_maxi_sidequest_create_trample_2", "vox_maxi_sidequest_create_trample_3", "vox_maxi_sidequest_create_trample_4", "vox_maxi_sidequest_fail_0", "vox_maxi_sidequest_fail_1", "vox_maxi_sidequest_fail_2", "vox_maxi_sidequest_fail_3", "vox_maxi_sidequest_lion_balls_0", "vox_maxi_sidequest_lion_balls_1", "vox_maxi_sidequest_lion_balls_2", "vox_maxi_sidequest_lion_balls_3", "vox_maxi_sidequest_lion_balls_4", "vox_maxi_sidequest_max_com_0", "vox_maxi_sidequest_max_com_1", "vox_maxi_sidequest_max_com_2", "vox_maxi_sidequest_punch_tower_0", "vox_maxi_sidequest_reincar_zombie_0", "vox_maxi_sidequest_reincar_zombie_1", "vox_maxi_sidequest_reincar_zombie_2", "vox_maxi_sidequest_reincar_zombie_3", "vox_maxi_sidequest_reincar_zombie_4", "vox_maxi_sidequest_reincar_zombie_5", "vox_maxi_sidequest_reincar_zombie_6", "vox_maxi_sidequest_sec_symbols_0", "vox_maxi_sidequest_sec_symbols_1", "vox_maxi_sidequest_sniper_rifle_0", "vox_maxi_sidequest_tower_complete_0" );
}

sq_play_maxis_vo( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( binitialsnap )
        return;

    a_maxis_vo_structs = getstructarray( "sq_maxis_vo_loc", "targetname" );

    if ( a_maxis_vo_structs.size < 3 )
        return;

    if ( newval )
    {
        if ( level.sq_clientfield_vo[newval] != "none" )
        {
            a_sorted_spots = [];

            foreach ( s_spot in a_maxis_vo_structs )
            {
                dist = distance( s_spot.origin, self.origin );
                is_inserted = 0;

                for ( i = 0; i < a_sorted_spots.size; i++ )
                {
                    if ( dist < a_sorted_spots[i].dist )
                    {
                        arrayinsert( a_sorted_spots, s_spot, i );
                        a_sorted_spots[i].dist = dist;
                        is_inserted = 1;
                        break;
                    }
                }

                if ( !is_inserted )
                {
                    index = a_sorted_spots.size;
                    a_sorted_spots[index] = s_spot;
                    a_sorted_spots[index].dist = dist;
                }
            }

            for ( i = 0; i < 3; i++ )
                playsound( localclientnum, level.sq_clientfield_vo[newval], a_sorted_spots[i].origin );
        }
    }
}

dragon_fireworks_init()
{
    a_tail_noteworthy = array( "r_drg_tail", "m_drg_tail" );
    a_which_drg = array( "r", "m" );
    assert( a_tail_noteworthy.size == a_which_drg.size, "zm_highrise_sq::dragon_fireworks_init - a_tail_noteworthy and a_which_drg must be the same size" );

    for ( i = 0; i < a_tail_noteworthy.size; i++ )
        level thread dragon_fireworks_think( a_tail_noteworthy[i], a_which_drg[i] );
}

dragon_fireworks_think( str_tail_noteworthy, str_which_drg )
{
    level waittill( str_tail_noteworthy );
    str_fx = "sidequest_dragon_spark_max";

    if ( str_which_drg == "r" )
        str_fx = "sidequest_dragon_spark_ric";

    for ( localclientnum = 0; localclientnum < level.localplayers.size; localclientnum++ )
    {
        m_tail = getstruct( str_tail_noteworthy, "targetname" );
        playfx( localclientnum, level._effect[str_fx], m_tail.origin, anglestoforward( m_tail.angles ) );
        level thread play_fireworks_audio( m_tail.origin );
    }

    n_firework_id = 0;

    while ( true )
    {
        level waittill( str_which_drg + "_start_firework" );
        str_firework_name = str_which_drg + "_drg_firework_" + n_firework_id;

        for ( localclientnum = 0; localclientnum < level.localplayers.size; localclientnum++ )
        {
            m_firework_loc = getstruct( str_firework_name, "targetname" );
            playfx( localclientnum, level._effect[str_fx], m_firework_loc.origin, anglestoforward( m_firework_loc.angles ) );
            level thread play_fireworks_audio( m_firework_loc.origin );
        }

/#
        println( "Dragon Firework On" );
#/
        n_firework_id++;
        wait 0.1;
    }
}

play_fireworks_audio( origin )
{
    playsound( 0, "zmb_sq_fireworks_start", origin );
    playloopat( "zmb_sq_sparkler_loop", origin );
}

dragon_fireball_init()
{
    a_dragons = array( "dragon_a", "dragon_b" );

    foreach ( str_dragon in a_dragons )
        level thread dragon_fireball( str_dragon );
}

dragon_fireball( str_which_dragon )
{
    level waittill( "start_fireball_" + str_which_dragon );

    for ( localclientnum = 0; localclientnum < level.localplayers.size; localclientnum++ )
        level thread dragon_fireball_go( localclientnum, str_which_dragon );
}

dragon_fireball_go( localclientnum, str_which_dragon )
{
    a_fxanim = getentarray( localclientnum, "fxanim", "targetname" );
    n_fx_id = undefined;
    str_fx = "sidequest_dragon_fireball_max";

    if ( str_which_dragon == "r" )
        str_fx = "sidequest_dragon_fireball_ric";

    foreach ( m_fxanim in a_fxanim )
    {
        if ( isdefined( m_fxanim.fxanim_scene_1 ) && m_fxanim.fxanim_scene_1 == str_which_dragon )
        {
            n_fx_id = playfxontag( localclientnum, level._effect["sidequest_dragon_fireball_max"], m_fxanim, "tag_mouth_fx" );
            origin = m_fxanim gettagorigin( "tag_mouth_fx" );
            playsound( 0, "zmb_sq_fireball_start", origin );
            ent = spawn( 0, origin, "script_origin" );
            ent linkto( m_fxanim, "tag_mouth_fx" );
            ent playloopsound( "zmb_sq_fireball_loop", 0.1 );
        }
    }

    n_anim_length = getanimlength( level.scr_anim["fxanim_props"][str_which_dragon] );
    wait( n_anim_length );
    stopfx( localclientnum, n_fx_id );
    playsound( 0, "zmb_sq_fireball_end", ent.origin );
    ent stoploopsound( 2 );
    ent delete();
}
