// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_morse_code()
{
    level.morse_code_wpm = 10;
    level.morse_code_dot_len = 1.2 / level.morse_code_wpm;
    level.morse_code_dash_len = level.morse_code_dot_len * 3;
    level.morse_code_space_same_letter = level.morse_code_dot_len;
    level.morse_code_space_next_letter = level.morse_code_dot_len * 3;
    level.morse_code_space_next_word = level.morse_code_dot_len * 7;
    level.morse_code_len = [];
    level.morse_code_len["dash"] = level.morse_code_dash_len;
    level.morse_code_len["dot"] = level.morse_code_dot_len;
    level.morse_code_space_next_message = 15;
    level.morse_code_messages = [];
    level.morse_code_letters = [];
    level.morse_code_location_fx = [];
    level thread morse_code_handler();
    level thread setup_morse_code_letter_table();
}

register_morse_code_location( effect_name, origin, angles )
{
    location_fx = spawnstruct();
    location_fx.effect = effect_name;
    location_fx.origin = origin;
    location_fx.angles = angles;
    level.morse_code_location_fx[level.morse_code_location_fx.size] = location_fx;
}

setup_morse_code_letter( letter, dot_st )
{
    level.morse_code_letters[letter] = strtok( dot_st, " " );
}

setup_morse_code_letter_table()
{
    setup_morse_code_letter( "a", "dot dash" );
    setup_morse_code_letter( "b", "dash dot dot dot" );
    setup_morse_code_letter( "c", "dash dot dash dot" );
    setup_morse_code_letter( "d", "dash dot dot" );
    setup_morse_code_letter( "e", "dot" );
    setup_morse_code_letter( "f", "dot dot dash dot" );
    setup_morse_code_letter( "g", "dash dash dot" );
    setup_morse_code_letter( "h", "dot dot dot dot" );
    setup_morse_code_letter( "i", "dot dot" );
    setup_morse_code_letter( "j", "dot dash dash dash" );
    setup_morse_code_letter( "k", "dash dot dash" );
    setup_morse_code_letter( "l", "dot dash dot dot" );
    setup_morse_code_letter( "m", "dash dash" );
    setup_morse_code_letter( "n", "dash dot" );
    setup_morse_code_letter( "o", "dash dash dash" );
    setup_morse_code_letter( "p", "dot dash dash dot" );
    setup_morse_code_letter( "q", "dash dash dot dash" );
    setup_morse_code_letter( "r", "dot dash dot" );
    setup_morse_code_letter( "s", "dot dot dot" );
    setup_morse_code_letter( "t", "dash" );
    setup_morse_code_letter( "u", "dot dot dash" );
    setup_morse_code_letter( "v", "dot dot dot dash" );
    setup_morse_code_letter( "w", "dot dash dash" );
    setup_morse_code_letter( "x", "dash dot dot dash" );
    setup_morse_code_letter( "y", "dash dot dash dash" );
    setup_morse_code_letter( "z", "dash dash dot dot" );
    setup_morse_code_letter( "0", "dash dash dash dash dash" );
    setup_morse_code_letter( "1", "dot dash dash dash dash" );
    setup_morse_code_letter( "2", "dot dot dash dash dash" );
    setup_morse_code_letter( "3", "dot dot dot dash dash" );
    setup_morse_code_letter( "4", "dot dot dot dot dash" );
    setup_morse_code_letter( "5", "dot dot dot dot dot" );
    setup_morse_code_letter( "6", "dash dot dot dot dot" );
    setup_morse_code_letter( "7", "dash dash dot dot dot" );
    setup_morse_code_letter( "8", "dash dash dash dot dot" );
    setup_morse_code_letter( "9", "dash dash dash dash dot" );
}

add_message( message )
{
    level.morse_code_messages[level.morse_code_messages.size] = tolower( message );
}

get_words( message )
{
    words = strtok( message, " " );
    level.current_morse_code_message = message;
    return words;
}

morse_code_handler()
{
    if ( level.localplayers.size > 2 )
        return;

    while ( true )
    {
        level waittill( "mc1" );
        level thread morse_code_message_loop();
        level waittill( "mc0" );
        morse_code_lights_off();
    }
}

morse_code_message_loop()
{
    level endon( "mc0" );
    create_morse_code_locations();

    while ( true )
    {
        foreach ( message in level.morse_code_messages )
        {
            words = get_words( message );

            foreach ( word in words )
            {
                for ( i = 0; i < word.size; i++ )
                {
                    letter = word[i];

                    if ( !isdefined( level.morse_code_letters[letter] ) )
                        continue;

                    letter_code = level.morse_code_letters[letter];

                    foreach ( code in letter_code )
                    {
                        morse_code_lights_on();
                        wait( level.morse_code_len[code] );
                        morse_code_lights_off();
                        wait( level.morse_code_space_same_letter );
                    }

                    wait( level.morse_code_space_next_letter );
                }

                wait( level.morse_code_space_next_word );
            }

            wait( level.morse_code_space_next_message );
        }
    }
}

create_morse_code_locations()
{
    if ( isdefined( level.morse_code_locations ) )
        return;

    level.morse_code_locations = [];
    players = getlocalplayers();

    foreach ( clientnum, player in players )
    {
        level.morse_code_locations[clientnum] = [];

        foreach ( location in level.morse_code_location_fx )
        {
            new_location = spawn( clientnum, location.origin, "script_model" );
            new_location setmodel( "tag_origin" );
            new_location.angles = location.angles;
            new_location.fx_name = location.effect;
            level.morse_code_locations[clientnum][level.morse_code_locations[clientnum].size] = new_location;
        }
    }
}

morse_code_lights_on()
{
    players = getlocalplayers();

    foreach ( clientnum, player in players )
    {
        if ( !isdefined( level.morse_code_locations[clientnum] ) )
            continue;

        foreach ( location in level.morse_code_locations[clientnum] )
            location._fx = playfxontag( clientnum, location.fx_name, location, "tag_origin" );
    }
}

morse_code_lights_off()
{
    players = getlocalplayers();

    foreach ( clientnum, player in players )
    {
        if ( !isdefined( level.morse_code_locations[clientnum] ) )
            continue;

        foreach ( location in level.morse_code_locations[clientnum] )
        {
            if ( isdefined( location._fx ) )
                stopfx( clientnum, location._fx );
        }
    }
}
