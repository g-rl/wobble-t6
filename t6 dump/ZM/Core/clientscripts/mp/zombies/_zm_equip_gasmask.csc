// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_fx;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\zombies\_zm_equipment;

init_filter_indices()
{
    if ( isdefined( level.genericfilterinitialized ) )
        return;

    level.genericfilterinitialized = 1;
    level.filter_matcount = 4;
    level.targetid_none = 0;
    level.targerid_small0 = 1;
    level.targerid_small1 = 2;
    level.targerid_scene = 3;
    level.targerid_postsun = 4;
    level.targerid_smallblur = 5;
}

map_material_helper( player, materialname )
{
    if ( !isdefined( level.filter_matid ) )
        level.filter_matid = [];

    if ( isdefined( level.filter_matid[materialname] ) )
        player map_material( level.filter_matid[materialname], materialname );
    else
    {
        level.filter_matid[materialname] = level.filter_matcount;
        player map_material( level.filter_matcount, materialname );
        level.filter_matcount++;
    }
}

init_filter_hazmat( player )
{
    init_filter_indices();
    map_material_helper( player, "zom_generic_filter_hazmat_moon" );
    map_material_helper( player, "zom_generic_overlay_hazmat_1" );
}

set_filter_hazmat_opacity( player, filterid, overlayid, opacity )
{
    player set_filter_pass_constant( filterid, 0, 0, opacity );
    player set_overlay_constant( overlayid, 0, opacity );
}

enable_filter_hazmat( player, filterid, overlayid, opacity )
{
    player set_filter_pass_material( filterid, 0, level.filter_matid["zom_generic_filter_hazmat_moon"] );
    player set_filter_pass_enabled( filterid, 0, 1 );
    player set_overlay_material( overlayid, level.filter_matid["zom_generic_overlay_hazmat_1"], 1 );
    player set_overlay_enabled( overlayid, 1 );
    set_filter_hazmat_opacity( player, filterid, overlayid, opacity );
}

disable_filter_hazmat( player, filterid, overlayid )
{
    player set_filter_pass_enabled( filterid, 0, 0 );
    player set_overlay_enabled( overlayid, 0 );
}

init()
{
    if ( getdvar( #"createfx" ) == "on" )
        return;

    if ( !clientscripts\mp\zombies\_zm_equipment::is_equipment_included( "equip_gasmask_zm" ) )
        return;

    registerclientfield( "toplayer", "gasmaskoverlay", 16000, 1, "int", ::gasmask_overlay_handler );
    level thread player_init();
}

gasmask_overlay_handler( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( !self islocalplayer() || isspectating( localclientnum, 0 ) || isdefined( level.localplayers[localclientnum] ) && self getentitynumber() != level.localplayers[localclientnum] getentitynumber() )
        return;

    if ( newval )
    {
        enable_filter_hazmat( self, 0, 0, 1.0 );
        self thread playsounds_gasmask( 1 );
    }
    else
    {
        disable_filter_hazmat( self, 0, 0 );
        self thread playsounds_gasmask( 0 );
    }
}

player_init()
{
    waitforallclients();
    wait 1.0;
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
        init_filter_hazmat( players[i] );
}

playsounds_gasmask( on )
{
    if ( !isdefined( self.gasmask_audio_ent ) )
        self.gasmask_audio_ent = spawn( 0, ( 0, 0, 0 ), "script_origin" );

    if ( on )
    {
        self.gasmask_audio_ent playloopsound( "evt_gasmask_loop", 0.5 );

        if ( isdefined( level._audio_zombie_gasmask_func ) )
            level thread [[ level._audio_zombie_gasmask_func ]]( on );
    }
    else
    {
        playsound( 0, "evt_gasmask_off", ( 0, 0, 0 ) );
        self.gasmask_audio_ent stoploopsound( 0.5 );
        self.gasmask_audio_ent delete();
        self.gasmask_audio_ent = undefined;

        if ( isdefined( level._audio_zombie_gasmask_func ) )
            level thread [[ level._audio_zombie_gasmask_func ]]( on );
    }
}
