// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_ambientpackage;
#include clientscripts\mp\zombies\_zm_utility;
#include clientscripts\mp\_music;
#include clientscripts\mp\_audio;

init()
{
    registerclientfield( "allplayers", "charindex", 1, 3, "int", ::charindex_cb, 0 );
    registerclientfield( "toplayer", "isspeaking", 1, 1, "int", ::isspeaking_cb, 0, 1 );
    level.exert_sounds = [];
    level.exert_sounds[0]["playerbreathinsound"] = "vox_exert_generic_inhale";
    level.exert_sounds[0]["playerbreathoutsound"] = "vox_exert_generic_exhale";
    level.exert_sounds[0]["playerbreathgaspsound"] = "vox_exert_generic_exhale";
    level.exert_sounds[0]["falldamage"] = "vox_exert_generic_pain";
    level.exert_sounds[0]["mantlesoundplayer"] = "vox_exert_generic_mantle";
    level.exert_sounds[0]["meleeswipesoundplayer"] = "vox_exert_generic_knifeswipe";
    level.exert_sounds[0]["dtplandsoundplayer"] = "vox_exert_generic_pain";

    if ( isdefined( level.setupcustomcharacterexerts ) )
        [[ level.setupcustomcharacterexerts ]]();

    level thread gameover_snapshot();
}

delay_set_exert_id( newval )
{
    self endon( "entityshutdown" );
    wait 0.5;
    self.player_exert_id = newval;
}

charindex_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( !bnewent )
    {
        self.player_exert_id = newval;
        self._first_frame_exert_id_recieved = 1;
    }
    else if ( !isdefined( self._first_frame_exert_id_recieved ) )
    {
        self._first_frame_exert_id_recieved = 1;
        self thread delay_set_exert_id( newval );
    }
}

isspeaking_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( !bnewent )
        self.isspeaking = newval;
    else
        self.isspeaking = 0;
}

zmbmuslooper()
{
    ent = spawn( 0, ( 0, 0, 0 ), "script_origin" );
    playsound( 0, "mus_zmb_gamemode_start", ( 0, 0, 0 ) );
    wait 10;
    ent playloopsound( "mus_zmb_gamemode_loop", 0.05 );
    ent thread waitfor_music_stop();
}

waitfor_music_stop()
{
    level waittill( "stpm" );
    self stoploopsound( 0.1 );
    playsound( 0, "mus_zmb_gamemode_end", ( 0, 0, 0 ) );
    wait 1;
    self delete();
}

playerfalldamagesound( client_num, firstperson )
{
    self playerexert( client_num, "falldamage" );
}

clientvoicesetup()
{
    players = getlocalplayers();

    for ( i = 0; i < players.size; i++ )
        thread audio_player_connect( i );
}

audio_player_connect( localclientnum )
{
    thread sndvonotifyplain( localclientnum, "playerbreathinsound" );
    thread sndvonotifyplain( localclientnum, "playerbreathoutsound" );
    thread sndvonotifyplain( localclientnum, "playerbreathgaspsound" );
    thread sndvonotifyplain( localclientnum, "mantlesoundplayer" );
    thread sndvonotifyplain( localclientnum, "meleeswipesoundplayer" );
    thread sndmeleeswipe( localclientnum, "meleeswipesoundplayer" );
    thread sndvonotifydtp( localclientnum, "dtplandsoundplayer" );
}

playerexert( localclientnum, exert )
{
    if ( isdefined( self.isspeaking ) && self.isspeaking == 1 )
        return;

    id = level.exert_sounds[0][exert];

    if ( isarray( level.exert_sounds[0][exert] ) )
        id = random( level.exert_sounds[0][exert] );

    if ( isdefined( self.player_exert_id ) )
    {
        if ( isarray( level.exert_sounds[self.player_exert_id][exert] ) )
            id = random( level.exert_sounds[self.player_exert_id][exert] );
        else
            id = level.exert_sounds[self.player_exert_id][exert];
    }

    self playsound( localclientnum, id );
}

sndvonotifydtp( localclientnum, notifystring )
{
    player = undefined;

    while ( !isdefined( player ) )
    {
        player = getnonpredictedlocalplayer( localclientnum );
        wait 0.05;
    }

    player endon( "disconnect" );

    for (;;)
    {
        player waittill( notifystring, surfacetype );
        player playerexert( localclientnum, notifystring );
    }
}

sndmeleeswipe( localclientnum, notifystring )
{
    player = undefined;

    while ( !isdefined( player ) )
    {
        player = getnonpredictedlocalplayer( localclientnum );
        wait 0.05;
    }

    player endon( "disconnect" );

    for (;;)
    {
        player waittill( notifystring );
        currentweapon = getcurrentweapon( localclientnum );

        if ( is_true( level.sndnomeleeonclient ) )
            return;

        if ( is_true( player.is_player_zombie ) )
        {
            playsound( 0, "zmb_melee_whoosh_zmb_plr", player.origin );
            continue;
        }

        if ( currentweapon == "bowie_knife_zm" )
        {
            playsound( 0, "zmb_bowie_swing_plr", player.origin );
            continue;
        }

        if ( currentweapon == "spoon_zm_alcatraz" )
        {
            playsound( 0, "zmb_spoon_swing_plr", player.origin );
            continue;
        }

        if ( currentweapon == "spork_zm_alcatraz" )
        {
            playsound( 0, "zmb_spork_swing_plr", player.origin );
            continue;
        }

        playsound( 0, "zmb_melee_whoosh_plr", player.origin );
    }
}

sndvonotifyplain( localclientnum, notifystring )
{
    player = undefined;

    while ( !isdefined( player ) )
    {
        player = getnonpredictedlocalplayer( localclientnum );
        wait 0.05;
    }

    player endon( "disconnect" );

    for (;;)
    {
        player waittill( notifystring );

        if ( is_true( player.is_player_zombie ) )
            continue;

        player playerexert( localclientnum, notifystring );
    }
}

end_gameover_snapshot()
{
    level waittill_any( "demo_jump", "demo_player_switch", "snd_clear_script_duck" );
    wait 1;
    snd_set_snapshot( "default" );
    level thread gameover_snapshot();
}

gameover_snapshot()
{
    level waittill( "zesn" );
    snd_set_snapshot( "zmb_gameover" );
    level thread end_gameover_snapshot();
}

sndsetzombiecontext( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval == 1 )
        self setsoundentcontext( "grass", "no_grass" );
    else
        self setsoundentcontext( "grass", "in_grass" );
}
