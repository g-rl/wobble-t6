// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;
#include clientscripts\mp\_fx;

init( localclientnum )
{
    level._effect["missile_drone_enemy_light"] = loadfx( "weapon/missile/fx_missile_drone_light_red" );
    level._effect["missile_drone_friendly_light"] = loadfx( "weapon/missile/fx_missile_drone_light_red" );
    registerclientfield( "toplayer", "missile_drone_active", 1, 2, "int", ::missile_drone_active_cb, 0 );
    registerclientfield( "missile", "missile_drone_projectile_active", 1, 1, "int", ::missile_drone_projectile_active_cb, 0 );
    registerclientfield( "missile", "missile_drone_projectile_animate", 1, 1, "int", ::missile_drone_projectile_animate_cb, 0 );
}

#using_animtree("mp_missile_drone");

missile_drone_projectile_animate_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    self endon( "entityshutdown" );
    self endon( "death" );
    wait 0.1;
    self waittill_dobj( localclientnum );
    self useanimtree( #animtree );
    self setanim( %o_drone_hunter_launch, 1.0, 0.0, 1.0 );
}

missile_drone_projectile_active_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval == 1 )
        self thread clientscripts\mp\_fx::blinky_light( localclientnum, "tag_target", level._effect["missile_drone_friendly_light"], level._effect["missile_drone_enemy_light"] );
    else
        self thread clientscripts\mp\_fx::stop_blinky_light( localclientnum );
}

missile_drone_active_cb( localclientnum, oldval, newval, bnewent, binitialsnap, fieldname, bwasdemojump )
{
    if ( newval == 2 )
        self targetacquired( localclientnum );
    else if ( newval == 1 )
        self targetscan( localclientnum );
    else
        self targetlost( localclientnum );
}

targetlost( localclientnum )
{
    self notify( "targetLost" );

    if ( isdefined( self.missile_drone_fx ) )
        stopfx( localclientnum, self.missile_drone_fx );
}

targetacquired( localclientnum )
{
    self endon( "disconnect" );
    self endon( "targetLost" );
    self endon( "targetScanning" );
    self endon( "entityshutdown" );
    self notify( "targetAcquired" );
    soundplayed = 0;
    waitrealtime( 0.05 );

    for (;;)
    {
        currentweapon = getcurrentweapon( localclientnum );

        if ( currentweapon != "missile_drone_mp" && currentweapon != "inventory_missile_drone_mp" )
        {
            waitrealtime( 1 );
            continue;
        }

        if ( isads( localclientnum ) || isthrowinggrenade( localclientnum ) || ismeleeing( localclientnum ) || isonturret( localclientnum ) )
        {
            waitrealtime( 1 );
            continue;
        }

        if ( getweaponammoclip( localclientnum, currentweapon ) <= 0 )
        {
            waitrealtime( 1 );
            continue;
        }

        self.missile_drone_fx = playviewmodelfx( localclientnum, level._effect["missile_drone_enemy_light"], "tag_target" );

        if ( !soundplayed )
            playsound( localclientnum, "fly_hunter_raise_plr", self.origin );

        soundplayed = 1;
        waitrealtime( 0.5 );
    }
}

targetscan( localclientnum )
{
    self endon( "disconnect" );
    self endon( "targetLost" );
    self endon( "targetAcquired" );
    self notify( "targetScanning" );
    soundplayed = 0;

    for (;;)
    {
        currentweapon = getcurrentweapon( localclientnum );

        if ( currentweapon != "missile_drone_mp" && currentweapon != "inventory_missile_drone_mp" )
        {
            waitrealtime( 1 );
            continue;
        }

        soundplayed = 1;
        waitrealtime( 1 );
    }
}
