// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include clientscripts\mp\_utility;

music_init()
{
    level.activemusicstate = "";
    level.nextmusicstate = "";
    level.musicstates = [];
    level.musicent = spawnfakeent( 0 );
    level.stingerent = spawnfakeent( 0 );
    thread updatemusic();
    thread demofixup();
    clientscripts\mp\_utility::registersystem( "musicCmd", ::musiccmdhandler );
    declaremusicstate( "SILENT" );
    musicaliasloop( "null", 0, 1 );

    if ( !sessionmodeiszombiesgame() )
    {
        declaremusicstate( "SPAWN_WAGER" );
        musicalias( "mus_spawn_wager", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_ST6" );
        musicalias( "mus_spawn_st6", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_SHORT_ST6" );
        musicalias( "mus_spawn_short_st6", 0.5 );
        musicwaittilldone();
        declaremusicstate( "VICTORY_ST6" );
        musicalias( "mus_victory_st6", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_FBI" );
        musicalias( "mus_spawn_fbi", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_SHORT_FBI" );
        musicalias( "mus_spawn_short_fbi", 0.5 );
        musicwaittilldone();
        declaremusicstate( "VICTORY_FBI" );
        musicalias( "mus_victory_fbi", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_CIA" );
        musicalias( "mus_spawn_cia", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_SHORT_CIA" );
        musicalias( "mus_spawn_short_cia", 0.5 );
        musicwaittilldone();
        declaremusicstate( "VICTORY_CIA" );
        musicalias( "mus_victory_cia", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_PMC" );
        musicalias( "mus_spawn_pmc", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_SHORT_PMC" );
        musicalias( "mus_spawn_short_pmc", 0.5 );
        musicwaittilldone();
        declaremusicstate( "VICTORY_PMC" );
        musicalias( "mus_victory_pmc", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_PLA" );
        musicalias( "mus_spawn_pla", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_SHORT_PLA" );
        musicalias( "mus_spawn_short_pla", 0.5 );
        musicwaittilldone();
        declaremusicstate( "VICTORY_PLA" );
        musicalias( "mus_victory_pla", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_TER" );
        musicalias( "mus_spawn_ter", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_SHORT_TER" );
        musicalias( "mus_spawn_short_ter", 0.5 );
        musicwaittilldone();
        declaremusicstate( "VICTORY_TER" );
        musicalias( "mus_victory_ter", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN" );
        musicalias( "mus_spawn", 0.5 );
        musicwaittilldone();
        declaremusicstate( "SPAWN_SHORT" );
        musicalias( "mus_spawn_short", 0.5 );
        declaremusicstate( "UNDERSCORE" );
        musicalias( "mus_underscore", 1 );
        declaremusicstate( "ACTION" );
        musicaliasloop( "mus_action", 1, 1 );
        declaremusicstate( "TIME_OUT" );
        musicalias( "mus_time_running_out", 1 );
        declaremusicstate( "VICTORY" );
        musicalias( "mus_victory", 0.5 );
        declaremusicstate( "LOSE" );
        musicalias( "mus_loss", 0.5 );
        declaremusicstate( "DRAW" );
        musicalias( "mus_draw", 0.5 );
        declaremusicstate( "ROUND_END" );
        musicalias( "mus_halftime", 0.5 );
        declaremusicstate( "ROUND_SWITCH" );
        musicalias( "mus_halftime", 0.5 );
        declaremusicstate( "MP_LAST_STAND" );
        musicalias( "mus_last_stand", 0.5 );
        musicaliasloop( "null", 0, 1 );
        declaremusicstate( "MP_LAST_STAND_DIE" );
        musicalias( "mus_spawn_short", 0.5 );
        musicaliasloop( "null", 0, 1 );
        declaremusicstate( "MP_LAST_STAND_REVIVE" );
        musicalias( "mus_spawn_short", 0.5 );
        musicaliasloop( "null", 0, 1 );
        declaremusicstate( "CTF_WE_SCORE" );
        musicstinger( "mus_ctf_we_score", 0 );
        declaremusicstate( "CTF_WE_TAKE" );
        musicstinger( "mus_ctf_we_take", 0.5 );
        declaremusicstate( "CTF_THEY_TAKE" );
        musicstinger( "mus_ctf_they_take", 0.5 );
        declaremusicstate( "SUSPENSE" );
        musicaliasloop( "mus_suspense", 1, 1 );
        declaremusicstate( "CTF_THEY_SCORE" );
        musicstinger( "mus_ctf_they_score", 0.5 );
        declaremusicstate( "CTF_THEY_SCORE" );
        musicstinger( "mus_ctf_they_score", 0.5 );
        declaremusicstate( "MATCH_END" );
        musicalias( "mus_time_running_out", 0.5 );
        musicaliasloop( "mus_underscore", 0, 1 );
        declaremusicstate( "DEM_WE_PLANT" );
        musicalias( "mus_ctf_we_take", 0.5 );
        declaremusicstate( "DEM_THEY_PLANT" );
        musicalias( "mus_ctf_they_take", 0.5 );
        declaremusicstate( "DEM_WE_DEFUSE" );
        musicalias( "mus_ctf_we_score", 0.5 );
        declaremusicstate( "DEM_THEY_DEFUSE" );
        musicalias( "mus_ctf_they_score", 0.5 );
        declaremusicstate( "DEM_WE_SCORE" );
        musicalias( "mus_ctf_we_score", 0.5 );
        declaremusicstate( "DEM_THEY_SCORE" );
        musicalias( "mus_ctf_they_score", 0.5 );
        declaremusicstate( "DEM_ONE_LEFT_UNDERSCORE" );
        musicaliasloop( "mus_underscore", 0, 1 );
    }
}

musiccmdhandler( clientnum, state, oldstate )
{
    if ( clientnum != 0 )
        return;

    level.nextmusicstate = state;
    level notify( "new_music" );
}

demofixup()
{
    for (;;)
    {
        level waittill( "demo_jump" );
        level.nextmusicstate = "SILENT";
        level notify( "new_music" );
    }
}

updatemusic()
{
    while ( true )
    {
        if ( level.activemusicstate == level.nextmusicstate )
            level waittill( "new_music" );

        if ( level.activemusicstate == level.nextmusicstate )
            continue;

        active = level.activemusicstate;
        next = level.nextmusicstate;

        if ( next != "" && !isdefined( level.musicstates[next] ) )
        {
/#
            assertmsg( "unknown music state '" + next + "'" );
#/
            level.nextmusicstate = level.activemusicstate;
            continue;
        }

        if ( active != "" )
            transitionout( active, next );

        if ( next != "" )
            transitionin( active, next );

        level.activemusicstate = next;
    }
}

fadeoutandstopsound( id, time )
{
    rate = 0;

    if ( time != 0 )
        rate = 1.0 / time;

    setsoundvolumerate( id, rate );
    setsoundvolume( id, 0.0 );
    wait( time );
    stopsound( id );
}

transitionout( previous, next )
{
    if ( previous == "" )
        return;

    if ( !isdefined( level.musicstates[previous] ) )
    {
/#
        assertmsg( "unknown music state '" + previous + "'" );
#/
        return;
    }

    ent = level.musicstates[previous].aliasent;
    loopalias = level.musicstates[previous].loopalias;
    oneshotalias = level.musicstates[previous].oneshotalias;
    fadeout = level.musicstates[previous].fadeout;
    waittilldone = level.musicstates[previous].waittilldone;
    waittillstingerdone = level.musicstates[previous].waittillstingerdone;
    stinger = level.musicstates[previous].stinger;
    id = level.musicstates[previous].id;
    startdelay = level.musicstates[previous].startdelay;
    forcestinger = level.musicstates[previous].forcestinger;

    if ( next == "" )
    {
        nextloopalias = "";
        nextoneshotalias = "";
    }
    else
    {
        nextloopalias = level.musicstates[next].loopalias;
        nextoneshotalias = level.musicstates[next].oneshotalias;
    }

    stingerid = -1;
    loopmatches = loopalias == nextloopalias;
    haveoneshot = nextoneshotalias != "";

    if ( stinger != "" && ( !loopmatches || haveoneshot || forcestinger ) )
        stingerid = playsound( 0, stinger, ( 0, 0, 0 ) );

    if ( loopalias != "" )
    {
        if ( loopalias != nextloopalias || nextoneshotalias != "" )
        {
            stoploopsound( 0, ent, fadeout );

            if ( waittilldone )
                wait( fadeout );
        }
        else
        {

        }
    }
    else if ( waittilldone )
    {
        while ( soundplaying( id ) )
            wait 0.1;
    }
    else
        thread fadeoutandstopsound( id, fadeout );

    while ( startdelay > 0 && soundplaying( stingerid ) && getplaybacktime( stingerid ) < startdelay * 1000 )
        wait 0.01;

    if ( waittillstingerdone )
    {
        while ( soundplaying( stingerid ) )
            wait 0.1;
    }

    if ( loopalias != nextloopalias )
        level.musicstates[previous].id = -1;
}

transitionin( previous, next )
{
    ent = level.musicstates[next].aliasent;
    loopalias = level.musicstates[next].loopalias;
    oneshotalias = level.musicstates[next].oneshotalias;
    fadein = level.musicstates[next].fadein;
    loop = level.musicstates[next].loop;

    if ( previous == "" )
    {
        oldloopalias = "";
        oldoneshotalias = "";
        oldid = -1;
        oldstartdelay = 0;
        startdelay = 0;
    }
    else
    {
        oldloopalias = level.musicstates[previous].loopalias;
        oldoneshotalias = level.musicstates[previous].oneshotalias;
        oldid = level.musicstates[previous].id;
    }

    if ( oneshotalias != "" )
    {
        level.musicstates[next].id = playsound( 0, oneshotalias, ( 0, 0, 0 ) );

        if ( loopalias != "" )
        {
            while ( soundplaying( level.musicstates[next].id ) )
            {
                if ( level.nextmusicstate != next )
                {
                    thread fadeoutandstopsound( level.musicstates[next].id, level.musicstates[next].fadeout );
                    return;
                }

                wait 0.1;
            }
        }
    }

    if ( oldloopalias == loopalias && oldid != -1 && oneshotalias == "" )
    {
        level.musicstates[next].id = level.musicstates[previous].id;
        level.musicstates[previous].id = -1;
        oldent = level.musicstates[previous].aliasent;
        level.musicstates[previous].aliasent = level.musicstates[next].aliasent;
        level.musicstates[next].aliasent = oldent;
    }
    else if ( loopalias != "" )
        level.musicstates[next].id = playloopsound( 0, ent, loopalias, fadein );
}

declaremusicstate( name )
{
    if ( isdefined( level.musicstates[name] ) )
        return;

    level.musicdeclarename = name;
    level.musicstates[name] = spawnstruct();
    level.musicstates[name].aliasent = spawnfakeent( 0 );
    level.musicstates[name].loopalias = "";
    level.musicstates[name].oneshotalias = "";
    level.musicstates[name].fadein = 0;
    level.musicstates[name].fadeout = 0;
    level.musicstates[name].id = -1;
    level.musicstates[name].waittilldone = 0;
    level.musicstates[name].stinger = "";
    level.musicstates[name].waittillstingerdone = 0;
    level.musicstates[name].startdelay = 0;
    level.musicstates[name].forcestinger = 0;
}

musicwaittilldone()
{
    assert( isdefined( level.musicdeclarename ) );
    name = level.musicdeclarename;
    level.musicstates[name].waittilldone = 1;
}

musicwaittillstingerdone()
{
    assert( isdefined( level.musicdeclarename ) );
    name = level.musicdeclarename;
    level.musicstates[name].waittillstingerdone = 1;
}

musicstinger( stinger, delay, force )
{
    assert( isdefined( level.musicdeclarename ) );

    if ( !isdefined( delay ) )
        delay = 0;

    name = level.musicdeclarename;
    level.musicstates[name].stinger = stinger;
    level.musicstates[name].startdelay = delay;

    if ( isdefined( force ) )
        level.musicstates[name].forcestinger = force;
}

_musicalias( alias, fadein, fadeout, loop )
{
    assert( isdefined( level.musicdeclarename ) );
    name = level.musicdeclarename;

    if ( loop )
        level.musicstates[name].loopalias = alias;
    else
        level.musicstates[name].oneshotalias = alias;

    if ( !isdefined( fadeout ) )
        fadeout = 0.0;

    if ( !isdefined( fadein ) )
        fadein = 0.0;

    level.musicstates[name].fadein = fadein;
    level.musicstates[name].fadeout = fadeout;
}

musicaliasloop( alias, fadein, fadeout )
{
    _musicalias( alias, fadein, fadeout, 1 );
}

musicalias( alias, fadeout )
{
    _musicalias( alias, 0, fadeout, 0 );
}
